<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>python学习Day01</title>
    <url>/python%E5%AD%A6%E4%B9%A0%E7%AC%AC%E4%B8%80%E5%A4%A9%E8%AE%B0%E5%BD%95.html</url>
    <content><![CDATA[<h2 id="python输出语法"><a href="#python输出语法" class="headerlink" title="python输出语法"></a>python输出语法</h2><h3 id="将结果或者内容呈现给用户"><a href="#将结果或者内容呈现给用户" class="headerlink" title="将结果或者内容呈现给用户"></a>将结果或者内容呈现给用户</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">&quot;Hellow world&quot;</span>)</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<h3 id="关于输出："><a href="#关于输出：" class="headerlink" title="关于输出："></a>关于输出：</h3><ul>
<li><p>默认在尾部添加换行符</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">&quot;看看风景美如画，&quot;</span>)</span><br><span class="line">print(<span class="string">&quot;本想吟诗赠天下。&quot;</span>)</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line">看看风景美如画，</span><br><span class="line">本想吟诗赠天下。</span><br></pre></td></tr></table></figure></li>
<li><p>取消换行，在代码末尾添加” end=”” “</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">&quot;看看风景美如画，&quot;</span>,end=<span class="string">&quot;&quot;</span>)</span><br><span class="line">print(<span class="string">&quot;本想吟诗赠天下。&quot;</span>,end=<span class="string">&quot;&quot;</span>)</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line">看看风景美如画，本想吟诗赠天下。</span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="python数据类型"><a href="#python数据类型" class="headerlink" title="python数据类型"></a>python数据类型</h2><h3 id="整型（int）"><a href="#整型（int）" class="headerlink" title="整型（int）"></a>整型（int）</h3><ul>
<li><p>python可以直接输出整型</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 输出整型“100”</span></span><br><span class="line">print(<span class="number">100</span>)</span><br><span class="line"><span class="comment"># 输出整型“2+4”</span></span><br><span class="line">print(<span class="number">2</span> + <span class="number">4</span>)</span><br><span class="line"><span class="comment"># 输出整型“2×3”</span></span><br><span class="line">print(<span class="number">2</span> * <span class="number">3</span>)</span><br><span class="line"><span class="comment"># 输出整型“10÷2”</span></span><br><span class="line">print(<span class="number">10</span> / <span class="number">2</span>)</span><br><span class="line"><span class="comment"># 输出整型“10÷3的余数”</span></span><br><span class="line">print(<span class="number">10</span> % <span class="number">3</span>)</span><br><span class="line"><span class="comment"># 输出整型“2^4”</span></span><br><span class="line">print(<span class="number">2</span> ** <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line"><span class="number">100</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">6</span></span><br><span class="line"><span class="number">5.0</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">16</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="字符串（str）"><a href="#字符串（str）" class="headerlink" title="字符串（str）"></a>字符串（str）</h3><ul>
<li><p>字符串用英文单双引号扩出来</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">&quot;我是xiabud&quot;</span>)</span><br><span class="line">print(<span class="string">&quot;这是我的字符串测试代码&quot;</span>)</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line">我是xiabud</span><br><span class="line">这是我的字符串测试代码</span><br></pre></td></tr></table></figure></li>
<li><p>三引号可以输出多行字符串</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">&quot;&quot;&quot;这个是三引号输出，</span></span><br><span class="line"><span class="string">三引号可以输出多行字符串。&quot;&quot;&quot;</span>)</span><br></pre></td></tr></table></figure></li>
<li><p>对于字符串，可以通过加号拼接起来</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="string">&quot;我是&quot;</span>+<span class="string">&quot;xiabud&quot;</span>)</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line">我是xiabud</span><br></pre></td></tr></table></figure></li>
<li><p>可以让整型和字符串进行相乘，让字符串重复出现并且拼接</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="number">3</span>*<span class="string">&quot;我要干饭&quot;</span>)</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line">我要干饭我要干饭我要干饭</span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="布尔类型"><a href="#布尔类型" class="headerlink" title="布尔类型"></a>布尔类型</h3><ul>
<li><p>布尔类型中一共有两个值：true/false</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="number">1</span> &gt; <span class="number">2</span>)</span><br><span class="line">print(<span class="number">1</span> == <span class="number">1</span>)</span><br><span class="line"></span><br><span class="line">输出：</span><br><span class="line"><span class="literal">False</span></span><br><span class="line"><span class="literal">True</span></span><br></pre></td></tr></table></figure></li>
</ul>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>学习心得</tag>
      </tags>
  </entry>
  <entry>
    <title>微信小程序学习Day01</title>
    <url>/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%AD%A6%E4%B9%A0%E7%AC%AC%E4%B8%80%E5%A4%A9%E8%AE%B0%E5%BD%95.html</url>
    <content><![CDATA[<h2 id="文件目录介绍"><a href="#文件目录介绍" class="headerlink" title="文件目录介绍"></a>文件目录介绍</h2><img src="images/image-20210329183535316.png" alt="小程序目录">
<span id="more"></span>

<h3 id="app-js"><a href="#app-js" class="headerlink" title="app.js"></a>app.js</h3><blockquote>
<p>为逻辑层的文件，实现交互动效和逻辑等效果。</p>
</blockquote>
<h3 id="app-json"><a href="#app-json" class="headerlink" title="app.json"></a>app.json</h3><blockquote>
<ul>
<li><p>当前小程序的全局配置，包括了小程序的所有页面路径、界面表现、网络超时时间、底部tab等。</p>
</li>
<li><p>倘若想要在工具的预览中预览别的文件夹的页面，这将<code>app.js</code>中<code>pages</code>的目录移动到最上面。</p>
<figure class="highlight"><table><tr><td class="code"><pre><span class="line">&quot;pages&quot;:[</span><br><span class="line">  &quot;pages/index/index&quot;,</span><br><span class="line">  <span class="string">&quot;pages/logs/logs&quot;</span></span><br><span class="line">]</span><br></pre></td></tr></table></figure></li>
</ul>
<ul>
<li>倘若想要创建一个新页面，可以直接在<code>app.js</code>中<code>pages</code>的目录中添加文件名字即可。但是将<code>pages</code>里边儿的文件删除，并不会将目录里边儿的文件删除，所以删减需要手动删除。</li>
</ul>
</blockquote>
<h3 id="app-wxss"><a href="#app-wxss" class="headerlink" title="app.wxss"></a>app.wxss</h3><blockquote>
<p>为样式层的文件，其实就是<code>css</code>文件，几乎没区别。</p>
</blockquote>
<h3 id="project-config-json"><a href="#project-config-json" class="headerlink" title="project.config.json"></a>project.config.json</h3><blockquote>
<p>项目配置文件，做一个统一的个性化设置，例如界面颜色，编译配置等等。</p>
</blockquote>
<h3 id="sitemap-json"><a href="#sitemap-json" class="headerlink" title="sitemap.json"></a>sitemap.json</h3><blockquote>
<p>配置小程序及其页面是否允许被微信索引</p>
</blockquote>
<h3 id="pages"><a href="#pages" class="headerlink" title="pages"></a>pages</h3><blockquote>
<p>里面包含一个个具体的页面<br><code>wxss</code>页面样式<code>app.wxss</code>作为全局样式，<br>会作用于当前小程序的所有页面，局部页面样式</p>
</blockquote>
<h3 id="page-wxss"><a href="#page-wxss" class="headerlink" title="page.wxss"></a>page.wxss</h3><blockquote>
<p>仅对当前页面生效。</p>
</blockquote>
<h2 id="关于标签"><a href="#关于标签" class="headerlink" title="关于标签"></a>关于标签</h2><p>官方微信小程序链接：<a href="https://developers.weixin.qq.com/miniprogram/dev/component/">https://developers.weixin.qq.com/miniprogram/dev/component/</a></p>
<h3 id="view标签"><a href="#view标签" class="headerlink" title="view标签"></a>view标签</h3><p>视图容器</p>
<table>
<thead>
<tr>
<th align="left">属性</th>
<th align="left">类型</th>
<th align="left">默认值</th>
<th align="center">必填</th>
<th align="left">说明</th>
</tr>
</thead>
<tbody><tr>
<td align="left">hover-class</td>
<td align="left">string</td>
<td align="left">none</td>
<td align="center">否</td>
<td align="left">指定按下去的样式类。当 <code>hover-class=&quot;none&quot;</code> 时，没有点击态效果</td>
</tr>
<tr>
<td align="left">hover-stop-propagation</td>
<td align="left">boolean</td>
<td align="left">false</td>
<td align="center">否</td>
<td align="left">指定是否阻止本节点的祖先节点出现点击态</td>
</tr>
<tr>
<td align="left">hover-start-time</td>
<td align="left">number</td>
<td align="left">50</td>
<td align="center">否</td>
<td align="left">按住后多久出现点击态，单位毫秒</td>
</tr>
<tr>
<td align="left">hover-stay-time</td>
<td align="left">number</td>
<td align="left">400</td>
<td align="center">否</td>
<td align="left">手指松开后点击态保留时间，单位毫秒</td>
</tr>
</tbody></table>
<h4 id="防止冒泡案例："><a href="#防止冒泡案例：" class="headerlink" title="防止冒泡案例："></a>防止冒泡案例：</h4><p>wxml：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;box&quot;</span> </span></span><br><span class="line"><span class="tag"><span class="attr">hover-class</span>=<span class="string">&quot;boxHover&quot;</span> </span></span><br><span class="line"><span class="tag"><span class="attr">hover-start-time</span>=<span class="string">&quot;50&quot;</span> </span></span><br><span class="line"><span class="tag"><span class="attr">hover-stay-time</span>=<span class="string">&quot;50&quot;</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">view</span> <span class="attr">class</span>=<span class="string">&quot;item&quot;</span> </span></span><br><span class="line"><span class="tag"><span class="attr">hover-class</span>=<span class="string">&quot;itemHover&quot;</span> </span></span><br><span class="line"><span class="tag"><span class="attr">hover-start-time</span>=<span class="string">&quot;50&quot;</span> </span></span><br><span class="line"><span class="tag"><span class="attr">hover-stay-time</span>=<span class="string">&quot;50&quot;</span></span></span><br><span class="line"><span class="tag"><span class="attr">hover-stop-propagation</span></span></span><br><span class="line"><span class="tag">&gt;</span></span><br><span class="line">  子元素</span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">view</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>wxss:</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span>&#123; <span class="attribute">width</span>: <span class="number">100px</span>; <span class="attribute">height</span>: <span class="number">100px</span>; <span class="attribute">background</span>: red;&#125;</span><br><span class="line"><span class="selector-class">.boxHover</span>&#123; <span class="attribute">background</span>: hotpink;&#125;</span><br><span class="line"><span class="selector-class">.item</span>&#123; <span class="attribute">width</span>: <span class="number">50px</span>; <span class="attribute">height</span>: <span class="number">50px</span>; <span class="attribute">background</span>: gold;&#125;</span><br><span class="line"><span class="selector-class">.itemHover</span>&#123; <span class="attribute">background</span>: green;&#125;</span><br><span class="line"><span class="selector-class">.out</span> text&#123;<span class="attribute">color</span>: blue;&#125;</span><br></pre></td></tr></table></figure>

<img src="images/image-20210329193325792.png" alt="冒泡阻止">

<p>当点击子元素，父级元素不会随着子元素变色而变色，就是<code>hover-stop-propagation</code>阻止冒泡的作用。</p>
]]></content>
      <categories>
        <category>微信小程序</category>
      </categories>
      <tags>
        <tag>学习心得</tag>
        <tag>微信小程序</tag>
      </tags>
  </entry>
  <entry>
    <title>python学习Day02</title>
    <url>/python%E5%AD%A6%E4%B9%A0%E7%AC%AC%E4%BA%8C%E5%A4%A9%E8%AE%B0%E5%BD%95.html</url>
    <content><![CDATA[<h1 id="python学习Day02"><a href="#python学习Day02" class="headerlink" title="python学习Day02"></a>python学习Day02</h1><h2 id="数据类型的转换"><a href="#数据类型的转换" class="headerlink" title="数据类型的转换"></a>数据类型的转换</h2><ul>
<li><p>int，整型定义时，必须是数字且无引号，例如： 5、8、9</p>
</li>
<li><p>str，字符串定义时，必须用双引号括起来，例如： “中国”、”武沛齐”、”66”</p>
</li>
<li><p>bool，布尔值定义时，只能写True和False</p>
<span id="more"></span>
<p>不同的数据类型都有不同的功能，例如：整型可以加减乘除而字符串只能加（拼接）和乘法。如果想要做转换可遵循一个基本规则：想转换什么类型就让他包裹一些。<br>例如：str（666）=“666”是将整型转换为字符串、int（”888”）是将字符串转888。</p>
</li>
</ul>
<p>转换成整型：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#字符串转换为整型</span></span><br><span class="line">print(<span class="string">&quot;6&quot;</span>+<span class="string">&quot;9&quot;</span>)</span><br><span class="line">print(<span class="built_in">int</span>(<span class="string">&quot;6&quot;</span>)+<span class="built_in">int</span>(<span class="string">&quot;9&quot;</span>))</span><br><span class="line">输出：</span><br><span class="line"><span class="number">69</span></span><br><span class="line"><span class="number">15</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#布尔类型转化成字符串</span></span><br><span class="line"><span class="built_in">int</span>(<span class="literal">True</span>) 转换为<span class="number">1</span></span><br><span class="line"><span class="built_in">int</span>(<span class="literal">False</span>)转换位<span class="number">0</span></span><br></pre></td></tr></table></figure>

<p>字符串转化成int只能是数字字符串（数字加上双引号），文本字符串不能转化成int，否则会报错。</p>
<p>转换为字符串：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#整型转换为字符串</span></span><br><span class="line"><span class="built_in">str</span>(<span class="number">345</span>)</span><br><span class="line"><span class="built_in">str</span>(<span class="number">666</span>)+<span class="built_in">str</span>(<span class="number">9</span>)</span><br><span class="line"><span class="comment">#结果为“6669”</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#布尔值转换为字符串</span></span><br><span class="line"><span class="built_in">str</span>(<span class="literal">True</span>)</span><br><span class="line"><span class="built_in">str</span>(<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="built_in">str</span>(<span class="literal">True</span>))</span><br><span class="line">print(<span class="built_in">str</span>(<span class="literal">False</span>))</span><br><span class="line">输出：</span><br><span class="line"><span class="literal">True</span></span><br><span class="line"><span class="literal">False</span></span><br></pre></td></tr></table></figure>

<p>转换为布尔类型</p>
<p>所有整型除了0其他数字转换布尔类型皆为True</p>
<p>所有字符串除了””(空字符串)其他数字转换布尔类型皆为True</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">转换为布尔类型</span><br><span class="line"><span class="comment">#整形转布尔</span></span><br><span class="line"><span class="built_in">bool</span>(<span class="number">1</span>)<span class="literal">True</span></span><br><span class="line"><span class="built_in">bool</span>(<span class="number">2</span>) <span class="literal">True</span></span><br><span class="line"><span class="built_in">bool</span>(<span class="number">0</span>)<span class="literal">False</span></span><br><span class="line"><span class="built_in">bool</span>(-<span class="number">10</span>)<span class="literal">True</span></span><br><span class="line"><span class="comment">#字符串转布尔</span></span><br><span class="line"><span class="built_in">bool</span>(<span class="string">&quot;alex&quot;</span>) <span class="literal">True</span></span><br><span class="line"><span class="built_in">bool</span> ( <span class="string">&quot;砂玻帮你&quot;</span>)<span class="literal">True</span></span><br><span class="line"><span class="built_in">bool</span>(<span class="string">&quot;&quot;</span>)<span class="literal">False</span></span><br><span class="line"><span class="built_in">bool</span> (<span class="string">&quot; &quot;</span>) <span class="literal">True</span> <span class="comment">#哪怕字符串为空格，转换布尔类型都为Ture</span></span><br></pre></td></tr></table></figure>

<p>三句话搞定类型转换：</p>
<ul>
<li>其他所有类型转换为布尔类型时，除了空字符串、0以为其他都是True.</li>
<li>字符串转整形时，只有那种”988”格式的字符串才可以转换为整形，其他都报错。</li>
<li>想要转换为那种类型，就用这类型的英文包裹一下就行。</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">str</span>(...)</span><br><span class="line"><span class="built_in">int</span>(...)</span><br><span class="line"><span class="built_in">bool</span>(...)</span><br></pre></td></tr></table></figure>


]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>学习心得</tag>
      </tags>
  </entry>
  <entry>
    <title>python学习Day03</title>
    <url>/python%E5%AD%A6%E4%B9%A0%E7%AC%AC%E4%B8%89%E5%A4%A9%E8%AE%B0%E5%BD%95.html</url>
    <content><![CDATA[<h1 id="练习题"><a href="#练习题" class="headerlink" title="练习题"></a>练习题</h1><p>1.计算整型50乘以10再除以5的商并使用print输出。<br>2.判断整型8是否大于10的结果并使用print输出。<br>3.计算整型30除以2得到的余数并使用print输出。</p>
<span id="more"></span>
<p>4.使用字符串乘法实现把字符串”我爱我的祖国”创建三遍并拼接起来最终使用print输出。<br>5.判断字符串”wupeiq”和”alex”是否相等的结果并使用print输出。<br>6.判断整型666和整型666是否相等的结果并使用print输出。<br>7.判断字符串”666”和整型666是否相等的结果并使用print输出。<br>8.看代码写结果（禁止运行代码）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="built_in">print</span> ( <span class="built_in">int</span> (<span class="string">&quot;100&quot;</span>)*<span class="number">3</span> )</span><br><span class="line">print( <span class="built_in">int</span>(<span class="string">&quot;123&quot;</span>) + <span class="built_in">int</span>(<span class="string">&quot;88&quot;</span>) )</span><br><span class="line">print( <span class="built_in">str</span>(<span class="number">111</span>) + <span class="built_in">str</span>(<span class="number">222</span>) )</span><br><span class="line">print( <span class="built_in">str</span>(<span class="number">111</span>)*<span class="number">3</span> )</span><br><span class="line">print( <span class="built_in">int</span>(<span class="string">&quot;8&quot;</span>) &gt; <span class="number">7</span> )</span><br><span class="line">print( <span class="built_in">str</span>(<span class="number">111</span>) == <span class="number">111</span> )</span><br><span class="line">print( <span class="built_in">bool</span>(-<span class="number">1</span>) )</span><br><span class="line">print( <span class="built_in">bool</span>(<span class="number">0</span>) )</span><br><span class="line"><span class="built_in">print</span> ( <span class="built_in">bool</span>(<span class="string">&quot;&quot;</span>) )</span><br><span class="line">print( <span class="built_in">bool</span> (<span class="string">&quot;你好&quot;</span>) )</span><br><span class="line">print( <span class="literal">True</span> == <span class="literal">True</span>)</span><br><span class="line">print( <span class="literal">True</span> == <span class="literal">False</span>)</span><br><span class="line">print( <span class="built_in">bool</span>(<span class="string">&quot;&quot;</span>) == <span class="built_in">bool</span>(<span class="number">0</span>) )</span><br></pre></td></tr></table></figure>

<p>注意：类型转换不是改变原来值，实际在底层是新创建了一个值。例如有整数6，然后使用str（6）转化了一下得到”6”，实际上这个字符串”6”是依据整数6新创建的。</p>
<h1 id="答案："><a href="#答案：" class="headerlink" title="答案："></a>答案：</h1><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">print(<span class="number">50</span> * <span class="number">10</span> / <span class="number">5</span>)</span><br><span class="line">print(<span class="number">8</span> &gt; <span class="number">10</span>)</span><br><span class="line">print(<span class="number">30</span> % <span class="number">2</span>)</span><br><span class="line">print(<span class="string">&quot;我爱我的祖国&quot;</span> * <span class="number">3</span>)</span><br><span class="line">print(<span class="string">&quot;alex&quot;</span> == <span class="string">&quot;xiabud&quot;</span>)</span><br><span class="line">print(<span class="number">666</span> == <span class="number">666</span>)</span><br><span class="line">print(<span class="string">&quot;666&quot;</span> == <span class="number">666</span>)</span><br><span class="line"></span><br><span class="line">print(<span class="built_in">int</span>(<span class="string">&quot;100&quot;</span>) * <span class="number">3</span>)  <span class="comment"># 300</span></span><br><span class="line">print(<span class="built_in">int</span>(<span class="string">&quot;123&quot;</span>) + <span class="built_in">int</span>(<span class="string">&quot;88&quot;</span>))  <span class="comment"># 211</span></span><br><span class="line">print(<span class="built_in">str</span>(<span class="number">111</span>) + <span class="built_in">str</span>(<span class="number">222</span>))  <span class="comment"># 111222</span></span><br><span class="line">print(<span class="built_in">str</span>(<span class="number">111</span>) * <span class="number">3</span>)  <span class="comment"># 111111111</span></span><br><span class="line">print(<span class="built_in">int</span>(<span class="string">&quot;8&quot;</span>) &gt; <span class="number">7</span>)  <span class="comment"># True</span></span><br><span class="line">print(<span class="built_in">str</span>(<span class="number">111</span>) == <span class="number">111</span>)  <span class="comment"># False</span></span><br><span class="line">print(<span class="built_in">bool</span>(-<span class="number">1</span>))  <span class="comment"># True</span></span><br><span class="line">print(<span class="built_in">bool</span>(<span class="number">0</span>))  <span class="comment"># False</span></span><br><span class="line">print(<span class="built_in">bool</span>(<span class="string">&quot;&quot;</span>))  <span class="comment"># True</span></span><br><span class="line">print(<span class="built_in">bool</span>(<span class="string">&quot;你好&quot;</span>))  <span class="comment"># True</span></span><br><span class="line">print(<span class="literal">True</span> == <span class="literal">True</span>)  <span class="comment"># True</span></span><br><span class="line">print(<span class="literal">True</span> == <span class="literal">False</span>)  <span class="comment"># False</span></span><br><span class="line">print(<span class="built_in">bool</span>(<span class="string">&quot;&quot;</span>) == <span class="built_in">bool</span>(<span class="number">0</span>))  <span class="comment"># True</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>学习心得</tag>
      </tags>
  </entry>
  <entry>
    <title>python学习Day04</title>
    <url>/python%E5%AD%A6%E4%B9%A0%E7%AC%AC%E5%9B%9B%E5%A4%A9%E8%AE%B0%E5%BD%95.html</url>
    <content><![CDATA[<h1 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h1><p>变量，其实就是我们生活中起别名和外号，让变量名指向某个值，格式为：【变量名=值】，以后可以通过变量名来操作其对应的值。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name = <span class="string">&quot;xiabud&quot;</span></span><br><span class="line">print(name)</span><br></pre></td></tr></table></figure>
<span id="more"></span>
<p>注意：</p>
<ul>
<li><p>给变量赋值age =18</p>
</li>
<li><p>age值 age=18</p>
</li>
</ul>
<h2 id="变量名的规范"><a href="#变量名的规范" class="headerlink" title="变量名的规范"></a>变量名的规范</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">age =<span class="number">18</span></span><br><span class="line">name = <span class="string">&quot;alex&quot;</span></span><br><span class="line">flag =<span class="number">1</span> &gt; <span class="number">18</span></span><br><span class="line">address =<span class="string">&quot;北京昌平&quot;</span>+ <span class="string">&quot;沙河&quot;</span></span><br></pre></td></tr></table></figure>

<p>三个规范：</p>
<ul>
<li>变量名只能由字母、散字、下划线组成.</li>
<li>不能以字开头</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">nagme9 = <span class="string">&quot;alex&quot;</span></span><br></pre></td></tr></table></figure>

<ul>
<li>不能用Python内置的关键字</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">def = &quot;alex&quot;</span><br><span class="line"><span class="keyword">break</span> =<span class="number">123</span></span><br></pre></td></tr></table></figure>

<p>两个建议：</p>
<ul>
<li><p>下划线连接命名</p>
</li>
<li><p>见名知意</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">xiabud_name = <span class="string">&quot;xiabud&quot;</span></span><br><span class="line">xiabud_sex = <span class="string">&quot;male&quot;</span></span><br><span class="line">xiabud_age = <span class="number">18</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h2 id="l练习"><a href="#l练习" class="headerlink" title="l练习"></a>l练习</h2><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">name = <span class="string">&quot;吉诺比利&quot;</span></span><br><span class="line">nameo = <span class="string">&quot;帕克&quot;</span></span><br><span class="line">name_1 = <span class="string">&quot;邓肯&quot;</span></span><br><span class="line">coach = <span class="string">&quot;波波维奇&quot;</span></span><br><span class="line">_ = <span class="string">&quot;卡哇伊&quot;</span></span><br><span class="line">1_year = <span class="string">&quot;1990&quot;</span> <span class="comment">#错误</span></span><br><span class="line">year_1_ = <span class="string">&quot;1990&quot;</span></span><br><span class="line">_1_year = <span class="string">&quot;1990&quot;</span></span><br><span class="line">nba - team = <span class="string">&quot;马刺&quot;</span> <span class="comment">#错误</span></span><br><span class="line">new * name = <span class="string">&quot;伦纳德&quot;</span> <span class="comment">#错误</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>学习心得</tag>
      </tags>
  </entry>
  <entry>
    <title>Mybatis学习Day01</title>
    <url>/Mybatis%E5%AD%A6%E4%B9%A0Day01.html</url>
    <content><![CDATA[<h2 id="第一章-框架的概述"><a href="#第一章-框架的概述" class="headerlink" title="第一章 框架的概述"></a>第一章 框架的概述</h2><h3 id="三层架构"><a href="#三层架构" class="headerlink" title="三层架构"></a>三层架构</h3><p>mvc:web开发中，使用mvc架构模式。m：数据，V：视图，C：控制器。</p>
<p>c控制器：接收请求，调用service对象，显示请求的处理结果。当前使用servlet作为控制器。</p>
<p>V视图：现在使用jsp，html，css，js。显示请求的处理结果，把m中数据显示出来。</p>
<p>m数据：来自数据库mysql，来自文件，来自网络。</p>
<span id="more"></span>

<p>mvc作用：</p>
<p>1）实现解耦合。</p>
<p>2）让mvc各负其职。</p>
<p>3）使的系统扩展更好。更容易维护。</p>
<p>三层架构:</p>
<p>1.界面层 (视图层) :接收用户的请求, 调用service，显示请求的处理结果的。 包含了jsp, html, servlet等对象。对应的包controller。</p>
<p>2.业务逻辑层:处理业务逻辑，使用算法处理数据的。 把数据返回给界面层。 对应的是service包， 和包中的很多的XXXService类。例如:StudentService，OrderService, ShopService</p>
<p>3.持久层(数据库访问层) :访问数据库,或者读取文件，访问网络。获取数据。对应的包是dao。 dao包中很多的StudentDao, OrderDao, ShopDao等等。</p>
<h3 id="三层架构的请求流程"><a href="#三层架构的请求流程" class="headerlink" title="三层架构的请求流程"></a>三层架构的请求流程</h3><p>用户发起请求—&gt;界面层—&gt;业务逻辑层—&gt;持久层—&gt;数据库(mysql)</p>
<img src="images/image-20210712214841384.png" alt="三层架构的请求流程">


<h3 id="为什么要使用三层"><a href="#为什么要使用三层" class="headerlink" title="为什么要使用三层"></a>为什么要使用三层</h3><p>1，结构清晰、耦合度低,各层分工明确</p>
<p>2，可维护性高，可扩展性高.</p>
<p>3，有利于标准化</p>
<p>4，开发人员可以只关注整个结构中的其中某-层的功能实现</p>
<p>5，有利于各层逻辑的复用</p>
<h3 id="三层架构模式与框架"><a href="#三层架构模式与框架" class="headerlink" title="三层架构模式与框架"></a>三层架构模式与框架</h3><p>每一层对应着一个框架</p>
<ol>
<li><p>界面层–SpringMVC框架</p>
</li>
<li><p>业务层–Spring框架</p>
</li>
<li><p>持久层–MyBatis框架</p>
</li>
</ol>
<h3 id="框架"><a href="#框架" class="headerlink" title="框架"></a>框架</h3><p>1)什么是框架(framework)</p>
<p>   框架:就是一个软件，完成了部分的功能。软件中的类和类之间的方法调用都已经规定好了。 通过这些可以完成某些功能。框架看做是模版。</p>
<p>   框架是可以升级的，改造的。框架是安全的。</p>
<p>   框架是对某一个方面有用的, 不是全能的。</p>
<h3 id="框架解决的问题"><a href="#框架解决的问题" class="headerlink" title="框架解决的问题"></a>框架解决的问题</h3><p>1)框架能实现技术的整合。</p>
<p>2)提供开发的效率。降低难度。</p>
<h3 id="jdbc访问数据库的优缺点"><a href="#jdbc访问数据库的优缺点" class="headerlink" title="jdbc访问数据库的优缺点"></a>jdbc访问数据库的优缺点</h3><p>优点:</p>
<p>1.直观，好理解</p>
<p>缺点:</p>
<p>1.创建很多对象Connection ,Statement, ResultSet</p>
<p>2.注册驱动</p>
<p>3.执行sql语句</p>
<p>4.把ResultSet转为Student，List集合。</p>
<p>5.关闭资源</p>
<p>6.sql语句和业务逻辑代码混在一起</p>
<h3 id="mybatis框架"><a href="#mybatis框架" class="headerlink" title="mybatis框架"></a>mybatis框架</h3><p>什么是mybatis框架:是一个持久层框架， 原名是ibatis， 2013改名为 MyBatis. MyBatis可以操作数据库， 对数据执<br>行增删改查。看做是高级的jdbc。 解决jdbc的缺点。</p>
<p>mybatis能做什么?</p>
<p>1)注册驱动。</p>
<p>2)创建jdbc中使用的Connection， Statement, ResultSet。</p>
<p>3)执行sql语句， 得到ResultSet。</p>
<p>4)处理ResultSet， 把记录集中的数据转为java对象， 同时还能把java对象放入到List集合。</p>
<p>5)关闭资源。</p>
<p>6)实现sql语句和java代码的解耦合。</p>
<h2 id="第二章-MyBatis入门"><a href="#第二章-MyBatis入门" class="headerlink" title="第二章 MyBatis入门"></a>第二章 MyBatis入门</h2><h3 id="第一个例子"><a href="#第一个例子" class="headerlink" title="第一个例子"></a>第一个例子</h3><p>实现步骤:</p>
<h4 id="创建student表-id-name-email-age"><a href="#创建student表-id-name-email-age" class="headerlink" title="创建student表(id, name, email, age)"></a>创建student表(id, name, email, age)</h4><h4 id="新建maven项目"><a href="#新建maven项目" class="headerlink" title="新建maven项目"></a>新建maven项目</h4><h4 id="修改pom-xml"><a href="#修改pom-xml" class="headerlink" title="修改pom.xml"></a>修改pom.xml</h4><p>​       1)加入依赖mybatis依赖，mysql驱动， junit</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">  <span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--依赖列表--&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--mybatis依赖--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--mysql驱动--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--    单元测试--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>​       2)在<build>加入资源插件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--资源插件：处理src/main/java目录中的xml--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span><span class="comment">&lt;!--所在的目录--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">includes</span>&gt;</span><span class="comment">&lt;!--包括目录下的.properties.xml 文件都会扫描到--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">build</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="创建实体类Student。定义属性，属性名和列名保持一致。（创建domain文件，domain文件下创建Student-java文件-kind为class。）"><a href="#创建实体类Student。定义属性，属性名和列名保持一致。（创建domain文件，domain文件下创建Student-java文件-kind为class。）" class="headerlink" title="创建实体类Student。定义属性，属性名和列名保持一致。（创建domain文件，domain文件下创建Student.java文件 kind为class。）"></a>创建实体类Student。定义属性，属性名和列名保持一致。（创建domain文件，domain文件下创建Student.java文件 kind为class。）</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*属性名和列名保持一致*/</span></span><br><span class="line"><span class="keyword">private</span> Integer id;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> String email;</span><br><span class="line"><span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.id = id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getEmail</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> email;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEmail</span><span class="params">(String email)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.email = email;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Integer <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(Integer age)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;学生实体类信息&#123;&quot;</span> +</span><br><span class="line">            <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">            <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">            <span class="string">&quot;, email=&#x27;&quot;</span> + email + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">            <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">            <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="创建Dao接口，定义操作数据库的方法。（创建Dao文件，再创建一个为DaoStudent-java的文件：kind为interface。）"><a href="#创建Dao接口，定义操作数据库的方法。（创建Dao文件，再创建一个为DaoStudent-java的文件：kind为interface。）" class="headerlink" title="创建Dao接口，定义操作数据库的方法。（创建Dao文件，再创建一个为DaoStudent.java的文件：kind为interface。）"></a>创建Dao接口，定义操作数据库的方法。（创建Dao文件，再创建一个为DaoStudent.java的文件：kind为interface。）</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//查询一个学生</span></span><br><span class="line"><span class="function">Student <span class="title">selectStudentById</span><span class="params">(Integer id)</span></span>;</span><br></pre></td></tr></table></figure>

<h4 id="创建xml文件-mapper文件-，写sql语句。"><a href="#创建xml文件-mapper文件-，写sql语句。" class="headerlink" title="创建xml文件(mapper文件) ，写sql语句。"></a>创建xml文件(mapper文件) ，写sql语句。</h4><p>​       mybatis框架推荐是把sql语句和java代码分开</p>
<p>​       mapper文件:定义和dao接口在同一目录，一个表一个mapper文件。（在Dao文件中再创建一个为StudentDao.xml文件）</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;com.xienode.dao.StudentDao&quot;</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">        <span class="comment">&lt;!--查询一个学生Student--&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectStudentById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.xienode.domain.Student&quot;</span>&gt;</span></span><br><span class="line">    /*id:执行sql语句的唯一标识，是一个自定义字符串，推荐使用Dao接口的方法名。*/</span><br><span class="line">    /*resultType：告诉mybatis，执行sql语句，把数据赋值给哪个类型的java对象*/</span><br><span class="line">    /*resultType的值现在使用java对象的全限定名称*/</span><br><span class="line">        select id,name,email,age from student where id=1001</span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment"> 1.http://mybatis.org/dtd/mybatis-3-mapper.dtd是约束文件</span></span><br><span class="line"><span class="comment"> 约束文件的作用：定义和限制当前文件中可以使用的标签和属性，以及标签出现的顺序。</span></span><br><span class="line"><span class="comment"> 2.mapper是根标签，namespace：命名空间，不能为空，唯一值。</span></span><br><span class="line"><span class="comment">    推荐使用Dao接口的全限定名称。</span></span><br><span class="line"><span class="comment">    作用：参与识别sql语句的作用。</span></span><br><span class="line"><span class="comment"> 3.在mapper里面可以写&lt;insert&gt;,&lt;update&gt;,&lt;delete&gt;,&lt;select&gt;等标签。</span></span><br><span class="line"><span class="comment">    标签里边是对应的语句。</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="创建mybatis的主配置文件。（在resources目录-下创建mybatis-xml文件。）"><a href="#创建mybatis的主配置文件。（在resources目录-下创建mybatis-xml文件。）" class="headerlink" title="创建mybatis的主配置文件。（在resources目录 下创建mybatis.xml文件。）"></a>创建mybatis的主配置文件。（在resources目录 下创建mybatis.xml文件。）</h4><p>​       1)定义创建连接实例的数据源(DataSource) 对象</p>
<p>​       2)指定其他mapper文件的位置</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--设置日志--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;logImpl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;STDOUT_LOGGING&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!--配置数据源，创建connection对象--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--driver：配置驱动的内容--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--连接数据库的url--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/springdb&quot;</span>/&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--用户名--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--密码--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;admin&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--使用mapper的resource属性指定mapper文件的路径</span></span><br><span class="line"><span class="comment">            这个路径是从target/classes路径开始的</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">            俊用注意：</span></span><br><span class="line"><span class="comment">            resoruce-&quot;mapper文件的路径，使用/分割路径”</span></span><br><span class="line"><span class="comment">            一个mapper resource指定一个mapper文件</span></span><br><span class="line"><span class="comment">            --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;com/xienode/dao/StudentDao.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="创建测试类-。（在src-test-java-com-xienode-目录下创建-MyTest-java-文件，kind为Class。）"><a href="#创建测试类-。（在src-test-java-com-xienode-目录下创建-MyTest-java-文件，kind为Class。）" class="headerlink" title="创建测试类 。（在src/test/java/com/xienode/目录下创建 MyTest.java 文件，kind为Class。）"></a>创建测试类 。（在src/test/java/com/xienode/目录下创建 MyTest.java 文件，kind为Class。）</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyTest</span> </span>&#123;</span><br><span class="line">    <span class="comment">//测试mybatis执行sql语句</span></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">TestSelectStudentById</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="comment">//调用mybatis中的某个对象的方法，来执行mapper文件中的sql语句</span></span><br><span class="line">        <span class="comment">//mybatis核心类：sqlSessionFactory</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//1.定义mybatis主配置文件的位置，从类路径开始的相对路径</span></span><br><span class="line">        String config=<span class="string">&quot;mybatis.xml&quot;</span>;</span><br><span class="line">        <span class="comment">//2.读取主配置文件，使用mybatis框架中的resources类</span></span><br><span class="line">        InputStream inputStream = Resources.getResourceAsStream(config);</span><br><span class="line">        <span class="comment">//3.创建sqlSessionFactory对象，使用sqlSessionFactoryBuilder类</span></span><br><span class="line">        SqlSessionFactory factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//4.获取SqlSession对象</span></span><br><span class="line">        SqlSession session = factory.openSession();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//5.指定要执行的sql语句的标识id</span></span><br><span class="line">        <span class="comment">// sql的id = namespace+&quot;.&quot;+&lt;select&gt;\&lt;insert&gt;标签的id属性值</span></span><br><span class="line">        String sqlId = <span class="string">&quot;com.xienode.dao.StudentDao&quot;</span>+<span class="string">&quot;.&quot;</span>+<span class="string">&quot;selectStudentById&quot;</span>;</span><br><span class="line">        <span class="comment">//6.通过SqlSession的方法，执行sql语句</span></span><br><span class="line">        Student student = session.selectOne(sqlId);</span><br><span class="line">        System.out.println(<span class="string">&quot;使用mybatis查询一个学生&quot;</span>+student);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//7.关闭SqlSession对象</span></span><br><span class="line">        session.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="mybatis概念"><a href="#mybatis概念" class="headerlink" title="mybatis概念"></a>mybatis概念</h3><h4 id="自动提交"><a href="#自动提交" class="headerlink" title="自动提交"></a>自动提交</h4><p>当你的sql语句执行完毕后，提交事务。数据库更新操作之间保存到数据库。</p>
<h4 id="手动提交事务"><a href="#手动提交事务" class="headerlink" title="手动提交事务"></a>手动提交事务</h4><p>在你需要提交事务的位置，执行方法，提交事务或者回顾事务。</p>
<p>mybatis默认执行SQL语句是 手工提交事务 模式，在做insert，update，delete后需要提交事务。使用此代码可以手工提交事务。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">session.commit();</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>mybatis</category>
      </categories>
      <tags>
        <tag>学习心得</tag>
        <tag>mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>Mybatis学习Day02</title>
    <url>/Mybatis%E5%AD%A6%E4%B9%A0Day02.html</url>
    <content><![CDATA[<h2 id="占位符"><a href="#占位符" class="headerlink" title="占位符"></a>占位符</h2><p>占位符的格式为：<code>#&#123;&#125;</code>，表示从java程序中传入过来的数据。</p>
<p>将com/xienode/dao/StudentDao.xml的查询语句修改为如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectStudentById&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.xienode.domain.Student&quot;</span>&gt;</span></span><br><span class="line">select id,name,email,age from student where id= #&#123;StudentId&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>
<span id="more"></span>
<p>在MyTest.java中添加测试：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">TestSelectStudentById2</span><span class="params">()</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line"></span><br><span class="line">    String config=<span class="string">&quot;mybatis.xml&quot;</span>;</span><br><span class="line"></span><br><span class="line">    InputStream inputStream = Resources.getResourceAsStream(config);</span><br><span class="line"></span><br><span class="line">    SqlSessionFactory factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line"></span><br><span class="line">    SqlSession session = factory.openSession();</span><br><span class="line"></span><br><span class="line">    String sqlId = <span class="string">&quot;com.xienode.dao.StudentDao&quot;</span>+<span class="string">&quot;.&quot;</span>+<span class="string">&quot;selectStudentById&quot;</span>;</span><br><span class="line"></span><br><span class="line">    Student student = session.selectOne(sqlId,<span class="number">1002</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;使用mybatis查询一个学生&quot;</span>+student);</span><br><span class="line"></span><br><span class="line">    session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>修改完成之后，<code>Student student = session.selectOne(sqlId,1002);</code>的“1002”值会替换查询语句占位符的#{StudentId}。</p>
<h2 id="mybatis日志"><a href="#mybatis日志" class="headerlink" title="mybatis日志"></a>mybatis日志</h2><p>Mybatis 通过使用内置的日志工厂提供日志功能。内置日志工厂将会把日志工作委托给 下面的实现之一：</p>
<p> • SLF4J</p>
<p> • Apache Commons Logging</p>
<p> • Log4j 2</p>
<p> • Log4j </p>
<p>• JDK logging</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--设置日志--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;logImpl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;STDOUT_LOGGING&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>下图为设置后所显示的数据：<br><img src="images/image-20210723211017900.png" alt="日志的元素解释"></p>
<h2 id="insert传入的参数值"><a href="#insert传入的参数值" class="headerlink" title="insert传入的参数值"></a>insert传入的参数值</h2><p>如果传入给mybatis是一个java对象，使用#{属性名称}。来获取此属性的值。</p>
<p>属性值放到#{}占位符的位置，mybatis执行此属性对应的getxxx().</p>
<p>在MyTest.java中输入：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//6.通过SqlSession的方法，执行sql语句</span></span><br><span class="line">Student student = <span class="keyword">new</span> Student();</span><br><span class="line">student.setId(<span class="number">1005</span>);</span><br><span class="line">student.setName(<span class="string">&quot;张飞&quot;</span>);</span><br><span class="line">student.setEmail(<span class="string">&quot;zhangfei@qq.com&quot;</span>);</span><br><span class="line">student.setAge(<span class="number">26</span>);</span><br><span class="line"><span class="keyword">int</span> rows = session.insert(sqlId,student);</span><br></pre></td></tr></table></figure>

<p>在StudentDao.xml里边的insert语句则为（占位符）：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertStudent&quot;</span>&gt;</span></span><br><span class="line">    insert into student value (#&#123;id&#125;,#&#123;name&#125;,#&#123;email&#125;,#&#123;age&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="mapper文件的一些要点"><a href="#mapper文件的一些要点" class="headerlink" title="mapper文件的一些要点"></a>mapper文件的一些要点</h2><p>1.在insert标签中才会有resultType，可以决定查询的返回结果要转换成哪个java对象。</p>
<p>2.mapper的namespace是一个自定义的字符串，建议使用Dao接口的全限定名称。</p>
<p>3.项目中一般一个表一个mapper文件。</p>
<h2 id="mybatis的一些重要对象"><a href="#mybatis的一些重要对象" class="headerlink" title="mybatis的一些重要对象"></a>mybatis的一些重要对象</h2><p>1.Resources：MyBatis框架中的对象，一个作用读取主配置文件信息。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">InputStream inputStream = Resources.getResourceAsStream(config);</span><br></pre></td></tr></table></figure>

<p>2.SqlSessionFactoryBuilder：负责创建SqlSessionFactory对象。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">SqlSessionFactory factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br></pre></td></tr></table></figure>

<p>3.SqlSessionFactory：重要对象</p>
<p>SqlSessionFactory是一个重量级对象：创建此对象需要更多的资源和时间，所以说这个对象不应该频繁创建。在项目中有一个就可以了。</p>
<p>SqlSessionFactory接口：作用是SqlSession的工厂，，就是创建SqlSession对象。</p>
<p>DefaultSqlSessionFactory实现类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultSqlSessionFactory</span> <span class="keyword">implements</span> <span class="title">SqlSessionFactory</span> </span>&#123; &#125;</span><br></pre></td></tr></table></figure>



<p>sqlSessionFactory接口中的方法</p>
<p>openSession():获取一个默认的SqlSession对象，默认是需要手工提交事务的。</p>
<p>openSession(boolean):boolean参数表示是否自动提交事务。</p>
<p>​                    true：创建一个自动提交事务的SqlSession</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">SqlSession session = factory.openSession(ture);</span><br></pre></td></tr></table></figure>

<p>​                    false：等同于没有参数的openSession</p>
<p>4.SqlSession对象</p>
<p>SqlSession对象是通过sqlSessionFactory获取的。SqlSession本身是接口。</p>
<p>DefaultSqlSession：实现类</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DefaultSqlSession</span> <span class="keyword">implements</span> <span class="title">SqlSession</span> </span>&#123;&#125;</span><br></pre></td></tr></table></figure>

<p>SqlSession作用是提供了大量的执行sql语句的方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">selectOne：执行sql语句，最多得到一行记录，多于一行是错误的。</span><br><span class="line">selectList：执行sql语句，返回多行数据。</span><br><span class="line">selectMap：执行sql语句，返回一个map结果。</span><br><span class="line">insert：执行insert语句。</span><br><span class="line">update：执行update语句</span><br><span class="line">delete：执行delete语句</span><br><span class="line">commit：提交事务</span><br><span class="line">rollback：回滚事务</span><br></pre></td></tr></table></figure>

<p>注意：SqlSession对象不是线程安全的，使用的步骤：</p>
<p>①在方法的内部，执行sql语句之前，先获取SqlSession对象</p>
<p>②调用SqlSession的方法，执行sql语句</p>
<p>③关闭SqlSession对象，执行SqlSession.close()</p>
<h2 id="创建mapper文件和主配置文件的模板"><a href="#创建mapper文件和主配置文件的模板" class="headerlink" title="创建mapper文件和主配置文件的模板"></a>创建mapper文件和主配置文件的模板</h2><p>①创建一个普通的java项目，选择new modules，勾选Create from archetype，选择maven，选择maven-archetype-quickstart模板。自定义名称和版本。</p>
<p>②在main目录下创建resources文件，并且选择make为resources文件。删除默认生成的App和测试下面的AppTest包。</p>
<p>③将pom.xml中的依赖添加替换为之前的依赖。代码如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">maven.compiler.source</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.source</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">maven.compiler.target</span>&gt;</span>1.8<span class="tag">&lt;/<span class="name">maven.compiler.target</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--依赖列表--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--mybatis依赖--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.mybatis<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--mysql驱动--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>mysql<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mysql-connector-java<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.9<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--    单元测试--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>junit<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.11<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">build</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="comment">&lt;!--资源插件：处理src/main/java目录中的xml--&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">resources</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">resource</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">directory</span>&gt;</span>src/main/java<span class="tag">&lt;/<span class="name">directory</span>&gt;</span><span class="comment">&lt;!--所在的目录--&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">includes</span>&gt;</span><span class="comment">&lt;!--包括目录下的.properties.xml 文件都会扫描到--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.properties<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">include</span>&gt;</span>**/*.xml<span class="tag">&lt;/<span class="name">include</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;/<span class="name">includes</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">filtering</span>&gt;</span>false<span class="tag">&lt;/<span class="name">filtering</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">resource</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">resources</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>④创建实体类，包名为domain，名字为Student，创建在src/main/java/com/xienode文件下。在文件里边创建学生的实体类，代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> Integer id;</span><br><span class="line"><span class="keyword">private</span> String name;</span><br><span class="line"><span class="keyword">private</span> String email;</span><br><span class="line"><span class="keyword">private</span> Integer age;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Integer <span class="title">getId</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setId</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.id = id;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">getEmail</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> email;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setEmail</span><span class="params">(String email)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.email = email;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> Integer <span class="title">getAge</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setAge</span><span class="params">(Integer age)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;学生实体&#123;&quot;</span> +</span><br><span class="line">            <span class="string">&quot;id=&quot;</span> + id +</span><br><span class="line">            <span class="string">&quot;, name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">            <span class="string">&quot;, email=&#x27;&quot;</span> + email + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">            <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">            <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>⑤创建Dao，在src/main/java/com/xienode中创建dao文件，再创建StudentDao接口（kind为interface）。定义方法：查询学生</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">Student <span class="title">selectById</span><span class="params">(Integer id)</span></span>;</span><br></pre></td></tr></table></figure>

<p>⑥使用工具类和模板</p>
<p>1）创建mapper文件模板步骤：</p>
<p>》选择File</p>
<p>》Settings</p>
<p>》File and Code Templates</p>
<p>》再选择右边的“files“</p>
<p>》再选择”+“（选择添加自定义模板）</p>
<p>》右边方块“Name”中选择名称，起名为：mybatis·mapper</p>
<p>》再右边的“Extension”中扩展名为：xml</p>
<p>》文件mybatis·mapper.xml模板代码为如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">mapper</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Mapper 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-mapper.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">mapper</span> <span class="attr">namespace</span>=<span class="string">&quot;dao接口的全限定名称&quot;</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 使用insert，select，update，delete标签来写sql --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">mapper</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>2）创建mybatis主配置文件模板：</p>
<p>》选择File</p>
<p>》Settings</p>
<p>》File and Code Templates</p>
<p>》再选择右边的“files“</p>
<p>》再选择”+“（选择添加自定义模板）</p>
<p>》右边方块“Name”（自定义模板文件名称）中选择名称，起名为：mybatis·config</p>
<p>》再右边的“Extension”中扩展名为：xml</p>
<p>》文件mybatis·mapper.xml模板代码为如下：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot; ?&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">configuration</span></span></span><br><span class="line"><span class="meta">        <span class="meta-keyword">PUBLIC</span> <span class="meta-string">&quot;-//mybatis.org//DTD Config 3.0//EN&quot;</span></span></span><br><span class="line"><span class="meta">        <span class="meta-string">&quot;http://mybatis.org/dtd/mybatis-3-config.dtd&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">configuration</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--设置日志--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">settings</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">setting</span> <span class="attr">name</span>=<span class="string">&quot;logImpl&quot;</span> <span class="attr">value</span>=<span class="string">&quot;STDOUT_LOGGING&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">settings</span>&gt;</span></span><br><span class="line">    </span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!--配置数据源，创建connection对象--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--driver：配置驱动的内容--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--连接数据库的url--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/springdb&quot;</span>/&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--用户名--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--密码--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;admin&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;com/xienode/dao/StudentDao.xml&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">configuration</span>&gt;</span></span><br></pre></td></tr></table></figure>

<img src="images/image-20210724221651985.png">

<p>⑦此时可以选择为自己创建的模板：</p>
<img src="images/image-20210724221940250.png">

<h2 id="创建MyBatis工具类MyBatis-Util"><a href="#创建MyBatis工具类MyBatis-Util" class="headerlink" title="创建MyBatis工具类MyBatis-Util"></a>创建MyBatis工具类MyBatis-Util</h2><p>先在src/main/java/com/xienode里边创建一个包，取名为Utils，类的名字为MybatisUtil。</p>
<p>输入以下代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*工具类，创建sqlSession对象*/</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyBatisUtil</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> SqlSessionFactory factory = <span class="keyword">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        String config=<span class="string">&quot;mybatis.xml&quot;</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">           InputStream inputStream =  Resources.getResourceAsStream(config);</span><br><span class="line">           factory = <span class="keyword">new</span> SqlSessionFactoryBuilder().build(inputStream);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建方法，获取sqlSession对象</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> SqlSession <span class="title">getSqlSession</span><span class="params">()</span></span>&#123;</span><br><span class="line">        SqlSession session = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span>(factory!=<span class="keyword">null</span>)&#123;</span><br><span class="line">            session = factory.openSession();<span class="comment">//openSession(ture)</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> session;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="创建测试类来测试工具类"><a href="#创建测试类来测试工具类" class="headerlink" title="创建测试类来测试工具类"></a>创建测试类来测试工具类</h2><p>在src/test/java/com/xienode中创建一个com包，包中创建MyTest测试类。</p>
<p>输入以下代码测试：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectById</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1.获取sqlSession对象</span></span><br><span class="line">    SqlSession session = MyBatisUtil.getSqlSession();</span><br><span class="line">    <span class="comment">//2.去指定sqlId</span></span><br><span class="line">    String sqlId=<span class="string">&quot;com.xienode.dao.StudentDao.selectId&quot;</span>;</span><br><span class="line">    <span class="comment">//3.执行sqlSession的方法，表示执行sql语句</span></span><br><span class="line">    Student student = session.selectOne(sqlId,<span class="number">1002</span>);</span><br><span class="line">    <span class="comment">//4.输出查询的结果</span></span><br><span class="line">    System.out.println(<span class="string">&quot;查询的结果&quot;</span>+student);</span><br><span class="line">    <span class="comment">//5.关闭sqlSession对象</span></span><br><span class="line">    session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<img src="images/image-20210730213701174.png">

<p>可以看出来运行成功！</p>
<h2 id="查询SQL中所有的学生的数据"><a href="#查询SQL中所有的学生的数据" class="headerlink" title="查询SQL中所有的学生的数据"></a>查询SQL中所有的学生的数据</h2><p>在com/xienode/dao/StudentDao.java中添加一个查询所有学生的方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function">List&lt;Student&gt; <span class="title">selectStudents</span><span class="params">()</span></span>;</span><br></pre></td></tr></table></figure>

<p>然后在com/xienode/dao/StudentDao.xml中添加查询语句：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectStudents&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.xienode.domain.Student&quot;</span>&gt;</span></span><br><span class="line">    select id,name,email,age from student</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>再在测试类里面com/xienode/MyTest.java输入测试类查询实现代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectStudends</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1.获取sqlSession对象</span></span><br><span class="line">    SqlSession session = MyBatisUtil.getSqlSession();</span><br><span class="line">    <span class="comment">//2.去指定sqlId</span></span><br><span class="line">    String sqlId=<span class="string">&quot;com.xienode.dao.StudentDao.selectStudents&quot;</span>;</span><br><span class="line">    <span class="comment">//3.执行sqlSession的方法，表示执行sql语句</span></span><br><span class="line">    List&lt;Student&gt; students = session.selectList(sqlId);</span><br><span class="line">    <span class="comment">//4.输出查询的结果</span></span><br><span class="line">    <span class="keyword">for</span> (Student stu:students)&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;student====&quot;</span>+stu);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//5.关闭sqlSession对象</span></span><br><span class="line">    session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<img src="images/image-20210730214217821.png">

<p>运行成功！</p>
<h2 id="测试SQL的添加语句"><a href="#测试SQL的添加语句" class="headerlink" title="测试SQL的添加语句"></a>测试SQL的添加语句</h2><p>在com/xienode/dao/StudentDao.java中添加一个添加学生的方法：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">insertStudent</span><span class="params">(Student student)</span></span>;</span><br></pre></td></tr></table></figure>

<p>然后在com/xienode/dao/StudentDao.xml中添加查询语句：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">insert</span> <span class="attr">id</span>=<span class="string">&quot;insertStudent&quot;</span>&gt;</span></span><br><span class="line">    insert into student values (#&#123;id&#125;,#&#123;name&#125;,#&#123;email&#125;,#&#123;age&#125;)</span><br><span class="line"><span class="tag">&lt;/<span class="name">insert</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>再在测试类里面com/xienode/MyTest.java输入测试类查询实现代码：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testInsertStudent</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//1.获取sqlSession对象</span></span><br><span class="line">    SqlSession session = MyBatisUtil.getSqlSession();</span><br><span class="line">    <span class="comment">//2.去指定sqlId</span></span><br><span class="line">    String sqlId=<span class="string">&quot;com.xienode.dao.StudentDao.insertStudent&quot;</span>;</span><br><span class="line">    <span class="comment">//3.执行sqlSession的方法，表示执行sql语句</span></span><br><span class="line">    Student student = <span class="keyword">new</span> Student();</span><br><span class="line">    student.setId(<span class="number">1007</span>);</span><br><span class="line">    student.setName(<span class="string">&quot;小乔&quot;</span>);</span><br><span class="line">    student.setEmail(<span class="string">&quot;xiaoqiao@qq.com&quot;</span>);</span><br><span class="line">    student.setAge(<span class="number">500</span>);</span><br><span class="line">    <span class="keyword">int</span> rows = session.insert(sqlId,student);</span><br><span class="line">    session.commit();</span><br><span class="line">    System.out.println(<span class="string">&quot;insert的行数=&quot;</span>+rows);</span><br><span class="line">    <span class="comment">//5.关闭sqlSession对象</span></span><br><span class="line">    session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>测试截图如下：</p>
<img src="images/image-20210731163440929.png">

<p>运行成功！</p>
]]></content>
      <categories>
        <category>mybatis</category>
      </categories>
      <tags>
        <tag>学习心得</tag>
        <tag>mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>Mybatis框架学习Day04</title>
    <url>/Mybatis%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0Day04.html</url>
    <content><![CDATA[]]></content>
  </entry>
  <entry>
    <title>Mybatis学习Day03</title>
    <url>/Mybatis%E5%AD%A6%E4%B9%A0Day03.html</url>
    <content><![CDATA[<h2 id="MyBatis使用传统Dao执行sql"><a href="#MyBatis使用传统Dao执行sql" class="headerlink" title="MyBatis使用传统Dao执行sql"></a>MyBatis使用传统Dao执行sql</h2><p>在com/xienode/dao创建impl包，在包中创建StudentDaoImpl类，让这个类实现StudentDao的接口。</p>
<p>实现方法：</p>
<p>①获取sqlsession对象</p>
<p>②再指定执行的sqlId（依然为“namespace”+“.”+“Id”）</p>
<p>③再调用sqlsession的方法，选择sqlId和传入的值</p>
<p>④关闭sqlsession</p>
<p>⑤返回sqlsession的对象（student）</p>
<span id="more"></span>

<p>代码如下：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StudentDaoImpl</span> <span class="keyword">implements</span> <span class="title">StudentDao</span> </span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> Student <span class="title">selectById</span><span class="params">(Integer id)</span> </span>&#123;</span><br><span class="line">        SqlSession sqlSession = MyBatisUtil.getSqlSession();</span><br><span class="line">        String sqlId =<span class="string">&quot;com.xienode.dao.StudentDao.selectId&quot;</span>;</span><br><span class="line">        Student student= sqlSession.selectOne(sqlId,id);</span><br><span class="line">        sqlSession.close();</span><br><span class="line">        <span class="keyword">return</span> student;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> List&lt;Student&gt; <span class="title">selectStudents</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        SqlSession session = MyBatisUtil.getSqlSession();</span><br><span class="line"></span><br><span class="line">        String sqlId=<span class="string">&quot;com.xienode.dao.StudentDao.selectStudents&quot;</span>;</span><br><span class="line"></span><br><span class="line">        List&lt;Student&gt; students = session.selectList(sqlId);</span><br><span class="line"></span><br><span class="line">        session.close();</span><br><span class="line">        <span class="keyword">return</span> students;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">insertStudent</span><span class="params">(Student student)</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">        SqlSession session = MyBatisUtil.getSqlSession();</span><br><span class="line"></span><br><span class="line">        String sqlId=<span class="string">&quot;com.xienode.dao.StudentDao.insertStudent&quot;</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">int</span> rows = session.insert(sqlId,student);</span><br><span class="line"></span><br><span class="line">        session.commit();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;insert的行数=&quot;</span>+rows);</span><br><span class="line"></span><br><span class="line">        session.close();</span><br><span class="line">        <span class="keyword">return</span> rows;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h2 id="Mybatis的Dao代理说明"><a href="#Mybatis的Dao代理说明" class="headerlink" title="Mybatis的Dao代理说明"></a>Mybatis的Dao代理说明</h2><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String sqlId =<span class="string">&quot;com.xienode.dao.StudentDao.selectId&quot;</span>;</span><br><span class="line">Student student= sqlSession.selectOne(sqlId,id);</span><br></pre></td></tr></table></figure>

<p>测试方法中：调用dao的方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">Student student = dao.selectById(<span class="number">1001</span>);</span><br></pre></td></tr></table></figure>

<p>1）    dao：通过反射能够得到全限定类型名称</p>
<p>​           dao是studentDao类型的，全限定名称 com.bjpowernode.dao.StudentDao</p>
<p>2）    selectById:dao中的方法名称，方法名称就是 mapper文件中标签的id</p>
<p>​           通过dao.selectById（）能得到sqlId=”com.bipowernode.dao.studentDao.selectById”；</p>
<p>3）    确定调用sqlsession的那个方法</p>
<p>​           1.根帮dao接口的方法返回中，如果返回是一个对象，例如奶tudent，调用sqlsession.selectone（）；</p>
<p>​            如果dao接口中的方法返List，调用sqlsession的 selectlist（）；</p>
<p>​           2.根据mapper文件中的标签，如果标签是<insert>，调用sqlsession.insert()方法。</p>
<p>mybatis框架，发现使用dao的方法调用能确定执行sql语句的必要信息，mybatis简化dao对象的实现。</p>
<p>imybatis框架在程序执行期间，根据你的Dao接口，创建一个内存中的接口的实现类对象。</p>
<p>mybatis把这个技术叫做dao技术（动态代理，dao的动态代理）。</p>
<p>dao代理技术：mybatis 创建 studentDao接口的实现类 Proxy(studentDaoImpl)，使用框架创建的studentDaoImpl代替你自己手工实现的studentDaoImpl类的功能，不能开发人员写dao接口的实现类。</p>
<h3 id="使用代理技术的要求"><a href="#使用代理技术的要求" class="headerlink" title="使用代理技术的要求"></a>使用代理技术的要求</h3><p>①文件中的namespace：必须是dao接口的全限定名称</p>
<p>②mapper文件中的标签id是dao接口的方法名称一致</p>
<h3 id="mybatis代理的实现方式"><a href="#mybatis代理的实现方式" class="headerlink" title="mybatis代理的实现方式"></a>mybatis代理的实现方式</h3><p>使用sqlsession对象的方法getMapper（dao.class）</p>
<p>例如：现在有StudentDao的接口。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">sqlsession session = MybatisUitl.getSqlSessiom();</span><br><span class="line">StudentDao dao = session.getMapper(StudentDao.class);</span><br><span class="line">Student student = dao.selectById(<span class="number">1001</span>);</span><br><span class="line"><span class="comment">//上面代码</span></span><br><span class="line">StudentDao dao = session.getMapper(StudentDao.class);</span><br><span class="line"><span class="comment">//等同于</span></span><br><span class="line">StudentDao dao = <span class="keyword">new</span> StudentDaoImpl();</span><br></pre></td></tr></table></figure>

<p>在Test文件中使用代理查询数据：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectById</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取sqlSession对象</span></span><br><span class="line">    SqlSession session = MyBatisUtil.getSqlSession();</span><br><span class="line">    <span class="comment">//获取Dao的代理</span></span><br><span class="line">    StudentDao dao =  session.getMapper(StudentDao.class);</span><br><span class="line">    <span class="comment">//调用dao的方法</span></span><br><span class="line">    Student student = dao.selectById(<span class="number">1005</span>);</span><br><span class="line">    <span class="comment">//输出传入的数据</span></span><br><span class="line">    System.out.println(<span class="string">&quot;查询的参数是&quot;</span>+student);</span><br><span class="line">    <span class="comment">//关闭sqlSession对象</span></span><br><span class="line">    session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行截图：</p>
<img src="images/image-20210801171110032.png">

<p>运行成功！</p>
<h3 id="理解参数"><a href="#理解参数" class="headerlink" title="理解参数"></a>理解参数</h3><p>理解参数是：通过java程序把数据传入到mapper文件中的sql语句中。参数主要是指Dao接口方法的形参。</p>
<h4 id="ParameterType"><a href="#ParameterType" class="headerlink" title="ParameterType"></a>ParameterType</h4><p>ParameterType：表示参数的类型，指定Dao方法的形参数据类型。这个形参的数据类型是给mybatis使用。</p>
<p>mybatis在给sql语句的参数赋值时使用。PreparedStatement.setXXX(位置，值)</p>
<p>PreparedStatement pst = conn.preparedStatement(“select id,name,email,age from student where id = ?”)；</p>
<p>给？位置赋值</p>
<p>参数integer，执行pst.setInt(1,1005);</p>
<p>参数是string，执行pst.setString(1.”1005”);</p>
<p>第一个用法：java类型的全新定名称  parameterType = “java.long.Integer”</p>
<p>第二个用法：mybatis定义的java类型别名” parameterType = “int”</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectById&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span>  <span class="attr">resultType</span>=<span class="string">&quot;com.xienode.domain.Student&quot;</span>&gt;</span></span><br><span class="line">    select id,name,email,age from student where id = #&#123;studentId&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h4 id="Dao接口方法是一个简单类型的参数"><a href="#Dao接口方法是一个简单类型的参数" class="headerlink" title="Dao接口方法是一个简单类型的参数"></a>Dao接口方法是一个简单类型的参数</h4><p>dao接口：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//dao接口的方法形参是一个简单的类型</span></span><br><span class="line"><span class="comment">//简单类型：java基本数据类型和字符串（String）</span></span><br><span class="line"><span class="function">Student <span class="title">selectByEmail</span><span class="params">(String email)</span></span>;</span><br></pre></td></tr></table></figure>

<p>mapper文件：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">dao接口是一个简单类型的参数</span></span><br><span class="line"><span class="comment">mapper文件，获取这个参数值，使用的语法格式是#&#123;任意字符&#125;</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectByEmail&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;string&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.xienode.domain.Student&quot;</span>&gt;</span></span><br><span class="line">    select id,name,email,age from student where email = #&#123;studentEmail&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="dao接口有多个简单类型的参数"><a href="#dao接口有多个简单类型的参数" class="headerlink" title="dao接口有多个简单类型的参数"></a>dao接口有多个简单类型的参数</h4><p>@Param：命名参数，在方法的形参前面使用的，定义参数名。这个名称可以用在mapper文件中。</p>
<p>dao接口方法的定义</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*多个简单类型参数</span></span><br><span class="line"><span class="comment">* 使用@Param命名参数，注解是mybatis提供的</span></span><br><span class="line"><span class="comment">* 位置：在形参前面</span></span><br><span class="line"><span class="comment">* 属性：value 自定义的参数名称</span></span><br><span class="line"><span class="comment">* */</span></span><br><span class="line"><span class="function">List&lt;Student&gt; <span class="title">selectNameOrAge</span><span class="params">(<span class="meta">@Param(&quot;myname&quot;)</span> String name,</span></span></span><br><span class="line"><span class="function"><span class="params">                              <span class="meta">@Param(&quot;myage&quot;)</span> Integer age)</span></span>;</span><br></pre></td></tr></table></figure>

<p>命名参数的写法：mapper文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--当多个简单类型的参数，当使用了@Param命名后，例如@param(&quot;myname&quot;),在mapper中，使用#&#123;命名的参数&#125;，例如#&#123;myname&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectNameOrAge&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.xienode.domain.Student&quot;</span>&gt;</span></span><br><span class="line">    select id,name,email,age from student where name = #&#123;myname&#125; or age = #&#123;myage&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="dao接口方法使用一个对象作为参数"><a href="#dao接口方法使用一个对象作为参数" class="headerlink" title="dao接口方法使用一个对象作为参数"></a>dao接口方法使用一个对象作为参数</h4><p>方法的形参是一个java对象，这个java对象表示多个参数。使用对象的属性值作为参数使用</p>
<p>java对象的定义:</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Student</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Integer id;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> String email;</span><br><span class="line">    <span class="keyword">private</span> Integer age;</span><br><span class="line">    <span class="comment">//set,get方法</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">QueryParam</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> Object p1;</span><br><span class="line">    <span class="keyword">private</span> Object p2;</span><br><span class="line">    <span class="comment">//set,get方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>dao接口中的定义：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*一个java对象最为参数(对象由属性，每个属性有set，get方法)*/</span></span><br><span class="line"></span><br><span class="line"><span class="function">List&lt;Student&gt; <span class="title">selectByObject</span><span class="params">(Student student)</span></span>;</span><br><span class="line"></span><br><span class="line"><span class="function">List&lt;Student&gt; <span class="title">selectByQueryParam</span> <span class="params">(QueryParam param)</span></span>;</span><br></pre></td></tr></table></figure>

<p>mapper文件：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    一个java对象作为方法的参数，使用对象的属性作为参数值使用</span></span><br><span class="line"><span class="comment">    简单的语法：#&#123;属性名&#125;，mybatis调用此属性的getXXX()方法获取属性值</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectByObject&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.xienode.domain.Student&quot;</span>&gt;</span></span><br><span class="line">        select id,name,email,age from student where name = #&#123;name&#125; or age = #&#123;age&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectByQueryParam&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.xienode.domain.Student&quot;</span>&gt;</span></span><br><span class="line">    select id,name,email,age from student where name = #&#123;p1&#125; or age = #&#123;p2&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="dao接口中多个简单类型的参数，使用位置"><a href="#dao接口中多个简单类型的参数，使用位置" class="headerlink" title="dao接口中多个简单类型的参数，使用位置"></a>dao接口中多个简单类型的参数，使用位置</h4><p>参数位置：dao接口中方法的形参列表，从左往右，参数位置是0,1,2……</p>
<p>语法格式：#{arg0}，#{arg1}</p>
<p> dao接口：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*使用位置获取参数*/</span></span><br><span class="line"><span class="function">List&lt;Student&gt; <span class="title">selectByPosition</span><span class="params">(String name, Integer age)</span></span>;</span><br></pre></td></tr></table></figure>

<p>mapper文件:</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectByPosition&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.xienode.domain.Student&quot;</span>&gt;</span></span><br><span class="line">    select id,name,email,age from student where name = #&#123;arg0&#125; or age = #&#123;arg1&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="和-符号的区别"><a href="#和-符号的区别" class="headerlink" title="#和$符号的区别"></a>#和$符号的区别</h2><h3 id="“-”-占位符"><a href="#“-”-占位符" class="headerlink" title="“#” 占位符"></a>“#” 占位符</h3><p>语法：#{字符}</p>
<p>mybatis处理#{}使用jdbc对象是PrepareStatment对象</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectById&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span>  <span class="attr">resultType</span>=<span class="string">&quot;com.xienode.domain.Student&quot;</span>&gt;</span></span><br><span class="line">    select id,name,email,age from student where id = #&#123;studentId&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">mybatis创建prepareStatement对象，执行qsl语句</span><br><span class="line">Srting sql=&quot;select id,name,email,age from student where id = ?&quot;;</span><br><span class="line">PrepareStatement pst = conn.prepareStatement(sql);</span><br><span class="line">pst.setInt(1,1001);  //传递参数</span><br><span class="line">ResultSet rs = pst.executeQuery();	//执行sql语句</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>#{}特点：</p>
<p>①使用的PrepareStatement对象，执行sql语句，效率高。</p>
<p>②使用的PrepareStatement对象，能避险sql语句，sql语句执行更安全。</p>
<p>③#{}常常作为列值使用的，位于等于号的右侧，#{}位置的值的数据类型有关的。</p>
<h3 id="“-”占位符"><a href="#“-”占位符" class="headerlink" title="“$”占位符"></a>“$”占位符</h3><p>语法：${字符}</p>
<p>mybatis执行${}占位符的sql语句</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectById&quot;</span> <span class="attr">parameterType</span>=<span class="string">&quot;int&quot;</span>  <span class="attr">resultType</span>=<span class="string">&quot;com.xienode.domain.Student&quot;</span>&gt;</span></span><br><span class="line">    select id,name,email,age from student where id = $&#123;studentId&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line">$&#123;&#125; 表示字符串的连接，把sql语句的其他内容和$&#123;&#125;内容使用 字节串（+） 连接的方式连接在一起</span><br><span class="line">String sql = &quot;select id,name,email,age from student where id =&quot; + &quot;1001&quot;</span><br><span class="line"></span><br><span class="line">mybatis创建Statement对象，执行sql语句。</span><br><span class="line">Statement stmt = conn.createStatement(sql);</span><br><span class="line">ResultSet rs = stmt.executeQuery();</span><br></pre></td></tr></table></figure>

<p>${}的特点：</p>
<p>①使用Statement对象，执行sql语句，效率低。</p>
<p>②${}占位符的值，使用的字符串连接方式，有sql注入的风险。有代码安全的问题。</p>
<p>③${}数据是原样使用的，不会区分数据类型。</p>
<p>④${}常用作列名或者表名，能在保证数据安全的情况下使用${}。</p>
<h3 id="占位符的使用举例"><a href="#占位符的使用举例" class="headerlink" title="${}占位符的使用举例"></a>${}占位符的使用举例</h3><p>dao接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//使用$&#123;&#125;来对查询进行排序</span></span><br><span class="line"><span class="function">List&lt;Student&gt; <span class="title">queryStudentOrderByColName</span><span class="params">(<span class="meta">@Param(&quot;Colname&quot;)</span> String name)</span></span>;</span><br></pre></td></tr></table></figure>

<p>mapper文件：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;queryStudentOrderByColName&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.xienode.domain.Student&quot;</span>&gt;</span></span><br><span class="line">    select * from student order by $&#123;Colname&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>java测试文件里面：</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testQueryStudentOrderByColName</span><span class="params">()</span></span>&#123;</span><br><span class="line">    SqlSession sqlSession = MyBatisUtil.getSqlSession();</span><br><span class="line">    StudentDao dao = sqlSession.getMapper(StudentDao.class);</span><br><span class="line">    <span class="comment">/*按位置传递参数*/</span></span><br><span class="line">    <span class="comment">//选择属性进行排序</span></span><br><span class="line">    List&lt;Student&gt; students = dao.queryStudentOrderByColName(<span class="string">&quot;email&quot;</span>);<span class="comment">//在这里可以选择“age”，“name”，“email”和“id”</span></span><br><span class="line">    students.forEach(student1 -&gt; System.out.println(<span class="string">&quot;stu&quot;</span>+student1));</span><br><span class="line">    sqlSession.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>执行结果：</p>
<img src="images/image-20210812091932093.png">



<p>附：在运行时出现如下的错误时：“It’s likely that neither a Result Type nor a Result Map was specified.”</p>
<p>原因为：在mapper文件里面将ResultType写成了parameterType，改回去就好了。</p>
<img src="images/image-20210811220437881.png">]]></content>
      <categories>
        <category>mybatis</category>
      </categories>
      <tags>
        <tag>学习心得</tag>
        <tag>mybatis</tag>
      </tags>
  </entry>
  <entry>
    <title>Mybatis框架学习Day05</title>
    <url>/Mybatis%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0Day05.html</url>
    <content><![CDATA[<h2 id="MyBatis框架动态SQL"><a href="#MyBatis框架动态SQL" class="headerlink" title="MyBatis框架动态SQL"></a>MyBatis框架动态SQL</h2><p>什么是动态sql：同一个dao方法，根据不同的条件可以表示不同的sql语句，主要where部分有变化</p>
<p>使用mybatis提供的标签，实现动态sql的能力。主要学习if，where,foreach,sql。</p>
<p>使用动态sql的时候，dao方法的形参使用java对象。</p>
<p>什么时候使用动态sql：</p>
<p><img src="C:\Users\Dell\AppData\Roaming\Typora\typora-user-images\image-20210815115800999.png" alt="image-20210815115800999"></p>
<p>在mapper文件中使用大于，小于或等于符号最好将其转化为实体符号，否则XML可能会出现解析出错的问题。</p>
<table>
<thead>
<tr>
<th align="center">&lt;</th>
<th align="center">小于</th>
<th align="center">&amp; l t ;</th>
</tr>
</thead>
<tbody><tr>
<td align="center">&gt;</td>
<td align="center">大于</td>
<td align="center">&amp; g t ;</td>
</tr>
<tr>
<td align="center">&gt;=</td>
<td align="center">大于等于</td>
<td align="center">&amp; g t ;=</td>
</tr>
<tr>
<td align="center">&lt;=</td>
<td align="center">小于等于</td>
<td align="center">&amp; l t ;=</td>
</tr>
</tbody></table>
<h3 id="if标签"><a href="#if标签" class="headerlink" title="if标签"></a>if标签</h3><p>语法：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;boolan判断结果&quot;</span>&gt;</span></span><br><span class="line">	sql代码</span><br><span class="line"><span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">在mapper文件中</span><br><span class="line"><span class="tag">&lt;<span class="name">select</span>	<span class="attr">id</span>=<span class="string">&quot;selectStudent&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.xienode.domain.Student&quot;</span>&gt;</span></span><br><span class="line">	select * from student</span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;条件&quot;</span>&gt;</span></span><br><span class="line">    	sql语句</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>dao接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//if</span></span><br><span class="line"><span class="function">List&lt;Student&gt; <span class="title">selectIf</span><span class="params">(Student student)</span></span>;</span><br></pre></td></tr></table></figure>

<p>mapper文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--if的使用</span></span><br><span class="line"><span class="comment">test要使用对象的属性值作为条件</span></span><br><span class="line"><span class="comment">--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectIf&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.xienode.domain.Student&quot;</span>&gt;</span></span><br><span class="line">    select * from student</span><br><span class="line">    where id = -1</span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;name !=null and name !=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">        or name = #&#123;name&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;age &gt; 0&quot;</span>&gt;</span></span><br><span class="line">        or age <span class="symbol">&amp;lt;</span> #&#123;age&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>执行test</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectById</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取sqlSession对象</span></span><br><span class="line">        SqlSession session = MyBatisUtil.getSqlSession();</span><br><span class="line">        <span class="comment">//获取Dao的代理</span></span><br><span class="line">        StudentDao dao =  session.getMapper(StudentDao.class);</span><br><span class="line">        <span class="comment">//调用dao的方法</span></span><br><span class="line">        Student student = <span class="keyword">new</span> Student();</span><br><span class="line"><span class="comment">//        student.setName(&quot;李四&quot;);</span></span><br><span class="line"><span class="comment">//        student.setAge(22);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        student.setName(&quot;小杜&quot;);</span></span><br><span class="line">        student.setName(<span class="keyword">null</span>);</span><br><span class="line">        student.setAge(<span class="number">21</span>);</span><br><span class="line">        List&lt;Student&gt; students = dao.selectIf(student);</span><br><span class="line"></span><br><span class="line">        students.forEach(stu -&gt; System.out.println(stu));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭sqlSession对象</span></span><br><span class="line">        session.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="where标签"><a href="#where标签" class="headerlink" title="where标签"></a>where标签</h3><p>使用if标签，容易引起sql语法错误，使用where标签可以解决if产生的语法问题。</p>
<p>使用where，里面是一个或多个的if标签，当有一个if标签 判断条件为True，where标签会转为where关键字附加到sql语句的后面，如果if没有一个条件为true，忽略where和里面的if。</p>
<p>语法：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;条件1&quot;</span>&gt;</span>sql语句<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;条件2&quot;</span>&gt;</span>sql语句<span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>where标签删除和他最近的or或者是and。</p>
<p>dao接口</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//where</span></span><br><span class="line"><span class="function">List&lt;Student&gt; <span class="title">selectWhere</span><span class="params">(Student student)</span></span>;</span><br></pre></td></tr></table></figure>

<p>mapper文件</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--where--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectWhere&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.xienode.domain.Student&quot;</span>&gt;</span></span><br><span class="line">    select * from student</span><br><span class="line">    <span class="tag">&lt;<span class="name">where</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;name !=null and name !=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">            or name = #&#123;name&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;age &gt; 0&quot;</span>&gt;</span></span><br><span class="line">            or age <span class="symbol">&amp;lt;</span> #&#123;age&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">where</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>test方法</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectWhere</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取sqlSession对象</span></span><br><span class="line">        SqlSession session = MyBatisUtil.getSqlSession();</span><br><span class="line">        <span class="comment">//获取Dao的代理</span></span><br><span class="line">        StudentDao dao =  session.getMapper(StudentDao.class);</span><br><span class="line">        <span class="comment">//调用dao的方法</span></span><br><span class="line">        Student student = <span class="keyword">new</span> Student();</span><br><span class="line"><span class="comment">//        student.setName(&quot;李四&quot;);</span></span><br><span class="line"><span class="comment">//        student.setAge(22);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//        student.setName(&quot;小杜&quot;);</span></span><br><span class="line">        student.setName(<span class="keyword">null</span>);</span><br><span class="line">        student.setAge(<span class="number">21</span>);</span><br><span class="line">        List&lt;Student&gt; students = dao.selectWhere(student);</span><br><span class="line"></span><br><span class="line">        students.forEach(stu -&gt; System.out.println(stu));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//关闭sqlSession对象</span></span><br><span class="line">        session.close();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>



<h3 id="foreach循环标签"><a href="#foreach循环标签" class="headerlink" title="foreach循环标签"></a>foreach循环标签</h3><p>使用foreach可以循环数组，list集合，一般使用在in语句居多。</p>
<p>语法：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;集合类型&quot;</span> <span class="attr">open</span>=<span class="string">&quot;开始的字符&quot;</span> <span class="attr">close</span>=<span class="string">&quot;结束的字符&quot;</span> <span class="attr">item</span>=<span class="string">&quot;集合中的成员&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;集合成员之间的分隔符&quot;</span>&gt;</span></span><br><span class="line">	#&#123;item的值&#125;</span><br><span class="line"><span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>标签属性：</p>
<p>foreach：表示，循环的对象是数组，还是List集合。如果dao接口方法的形参是数组，collection=”array”。如果dao接口形参是List，collection=”list”。</p>
<p>open：循环开始时的字符。    sql.append(“(“);</p>
<p>close：循环结束时的字符。    sql.append(“)”);</p>
<p>item：集合的成员，是一个自定义的变量。    for (Integer item : idList){};</p>
<p>separator：集合成员之间的分隔符。    sql.append(“,”);</p>
<p>#{item的值}：获取集合成员的值。</p>
<h4 id="第一种方式：循环简单类型的List"><a href="#第一种方式：循环简单类型的List" class="headerlink" title="第一种方式：循环简单类型的List"></a>第一种方式：循环简单类型的List</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//foreach-1</span></span><br><span class="line"><span class="function">List&lt;Student&gt; <span class="title">selectForeach</span><span class="params">(List&lt;Integer&gt; idList)</span></span>;</span><br></pre></td></tr></table></figure>

<p>mapper</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--foreach循环简单类型List--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectForeach&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.xienode.domain.Student&quot;</span>&gt;</span></span><br><span class="line">    select * from student</span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;list !=null and list.size &gt; 0&quot;</span>&gt;</span></span><br><span class="line">        where id in</span><br><span class="line">    <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;list&quot;</span> <span class="attr">open</span>=<span class="string">&quot;(&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span> <span class="attr">item</span>=<span class="string">&quot;myId&quot;</span>&gt;</span></span><br><span class="line">        #&#123;myId&#125;</span><br><span class="line">    <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>test</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//foreach</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectForeach</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取sqlSession对象</span></span><br><span class="line">    SqlSession session = MyBatisUtil.getSqlSession();</span><br><span class="line">    <span class="comment">//获取Dao的代理</span></span><br><span class="line">    StudentDao dao =  session.getMapper(StudentDao.class);</span><br><span class="line">    <span class="comment">//调用dao的方法</span></span><br><span class="line">    List&lt;Integer&gt; idList = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    idList.add(<span class="number">1001</span>);</span><br><span class="line">    idList.add(<span class="number">1002</span>);</span><br><span class="line">    idList.add(<span class="number">1003</span>);</span><br><span class="line"></span><br><span class="line">    List&lt;Student&gt; students = dao.selectForeach(idList);</span><br><span class="line">    students.forEach(System.out::println);</span><br><span class="line">    <span class="comment">//关闭sqlSession对象</span></span><br><span class="line">    session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="第二种方式：循环对象数组类型"><a href="#第二种方式：循环对象数组类型" class="headerlink" title="第二种方式：循环对象数组类型"></a>第二种方式：循环对象数组类型</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//foreach-2</span></span><br><span class="line"><span class="function">List&lt;Student&gt; <span class="title">selectForeach2</span><span class="params">(List&lt;Student&gt; studentList)</span></span>;</span><br></pre></td></tr></table></figure>

<p>mapper</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--foreach第二種方式，循环的List&lt;Student&gt;--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectForeach2&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.xienode.domain.Student&quot;</span>&gt;</span></span><br><span class="line">    select * from student</span><br><span class="line">    <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;list != null and list.size &gt; 0&quot;</span>&gt;</span></span><br><span class="line">        where id in</span><br><span class="line">        <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;list&quot;</span> <span class="attr">open</span>=<span class="string">&quot;(&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span> <span class="attr">item</span>=<span class="string">&quot;stu&quot;</span>&gt;</span></span><br><span class="line">            #&#123;stu.id&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>test</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//foreach</span></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectForeach2</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取sqlSession对象</span></span><br><span class="line">    SqlSession session = MyBatisUtil.getSqlSession();</span><br><span class="line">    <span class="comment">//获取Dao的代理</span></span><br><span class="line">    StudentDao dao =  session.getMapper(StudentDao.class);</span><br><span class="line">    <span class="comment">//调用dao的方法</span></span><br><span class="line">    List&lt;Student&gt; list = <span class="keyword">new</span> ArrayList&lt;&gt;();</span><br><span class="line">    Student s1 = <span class="keyword">new</span> Student();</span><br><span class="line">    s1.setId(<span class="number">1001</span>);</span><br><span class="line">    Student s2 = <span class="keyword">new</span> Student();</span><br><span class="line">    s2.setId(<span class="number">1002</span>);</span><br><span class="line">    Student s3 = <span class="keyword">new</span> Student();</span><br><span class="line">    s3.setId(<span class="number">1003</span>);</span><br><span class="line"></span><br><span class="line">    list.add(s1);</span><br><span class="line">    list.add(s2);</span><br><span class="line">    list.add(s3);</span><br><span class="line"></span><br><span class="line">    List&lt;Student&gt; students = dao.selectForeach2(list);</span><br><span class="line">    students.forEach(System.out::println);</span><br><span class="line">    <span class="comment">//关闭sqlSession对象</span></span><br><span class="line">    session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>



<h3 id="代码片段"><a href="#代码片段" class="headerlink" title="代码片段"></a>代码片段</h3><p>sql标签标示一段sql代码，有、可以是表名，几个字段，where条件都可以，可以在其他复用sql标签的内容。</p>
<p>使用方法：</p>
<p>①在mapper文件中定义sql代码片段<br>$$<br><sql id="唯一字符串">    部分sql    </sql><br>$$<br>②在其他的位置，使用include标签引起某个代码片段</p>
<p>例如：</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--定义代码片段--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;selectStudent&quot;</span>&gt;</span></span><br><span class="line">    select * from student</span><br><span class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">sql</span> <span class="attr">id</span>=<span class="string">&quot;studentFileList&quot;</span>&gt;</span></span><br><span class="line">    id,name,age,email</span><br><span class="line"><span class="tag">&lt;/<span class="name">sql</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!--使用定义代码片段--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectIf&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.xienode.domain.Student&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;selectStudent&quot;</span>/&gt;</span></span><br><span class="line">        where id = -1</span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;name !=null and name !=&#x27;&#x27;&quot;</span>&gt;</span></span><br><span class="line">            or name = #&#123;name&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;age &gt; 0&quot;</span>&gt;</span></span><br><span class="line">            or age <span class="symbol">&amp;lt;</span> #&#123;age&#125;</span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	<span class="comment">&lt;!--使用定义代码片段--&gt;</span></span><br><span class="line">	    <span class="tag">&lt;<span class="name">select</span> <span class="attr">id</span>=<span class="string">&quot;selectForeach2&quot;</span> <span class="attr">resultType</span>=<span class="string">&quot;com.xienode.domain.Student&quot;</span>&gt;</span></span><br><span class="line">        select <span class="tag">&lt;<span class="name">include</span> <span class="attr">refid</span>=<span class="string">&quot;studentFileList&quot;</span>/&gt;</span> from student</span><br><span class="line">        <span class="tag">&lt;<span class="name">if</span> <span class="attr">test</span>=<span class="string">&quot;list != null and list.size &gt; 0&quot;</span>&gt;</span></span><br><span class="line">            where id in</span><br><span class="line">            <span class="tag">&lt;<span class="name">foreach</span> <span class="attr">collection</span>=<span class="string">&quot;list&quot;</span> <span class="attr">open</span>=<span class="string">&quot;(&quot;</span> <span class="attr">close</span>=<span class="string">&quot;)&quot;</span> <span class="attr">separator</span>=<span class="string">&quot;,&quot;</span> <span class="attr">item</span>=<span class="string">&quot;stu&quot;</span>&gt;</span></span><br><span class="line">                #&#123;stu.id&#125;</span><br><span class="line">            <span class="tag">&lt;/<span class="name">foreach</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">if</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>]]></content>
  </entry>
  <entry>
    <title>Mybatis框架学习Day06</title>
    <url>/Mybatis%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0Day06.html</url>
    <content><![CDATA[<h2 id="MyBatis配置文件"><a href="#MyBatis配置文件" class="headerlink" title="MyBatis配置文件"></a>MyBatis配置文件</h2><p>MyBatis配置文件两大类：①Mybatis主配置文件；②MyBatis的mapper文件</p>
<p>一：Mybatis主配置文件，提供MyBatis主配置文件，提供MyBatis全局设置的，包含的内容，数据源，mapper文件位置。</p>
<p>二：mapper文件：写sql语句的。一个表一个mapper文件</p>
<h3 id="settings部分"><a href="#settings部分" class="headerlink" title="settings部分"></a>settings部分</h3><p>settings是mybatis的全局设置，影响整个mybatis的运行。这个设置一般使用默认值就可以了。 </p>
<h3 id="别名部分"><a href="#别名部分" class="headerlink" title="别名部分"></a>别名部分</h3><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">    <span class="tag">&lt;<span class="name">typeAliases</span>&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--第一种语法格式</span></span><br><span class="line"><span class="comment">            type:java类型全限定名称</span></span><br><span class="line"><span class="comment">            alias：自定义别名</span></span><br><span class="line"><span class="comment">            优点：自定义别名</span></span><br><span class="line"><span class="comment">            缺点：每个类型必须单独定义</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line"><span class="comment">&lt;!--        &lt;typeAlias type=&quot;com.xienode.domain.Student&quot; alias=&quot;stu&quot; /&gt;--&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">        第二种方式</span></span><br><span class="line"><span class="comment">        name：包名，mybatis会把这个所有的类作为别名（不用区分大小写）</span></span><br><span class="line"><span class="comment">        优点：使用方便，一次给多个类定义别名</span></span><br><span class="line"><span class="comment">        缺点：别名不能自定义，必须是类名。</span></span><br><span class="line"><span class="comment">        --&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.xienode.domain&quot;</span>/&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h3><p>environments：环境标签，在它里面可以配置多个environments。</p>
<p>​    属性：id    default，必须是某个environment的id属性值。表示默认连接是数据库。</p>
<p>environment：表示一个数据库的连接信息。</p>
<p>​    属性：id    自定义的环境标识。唯一值。</p>
<p>transactionManager：事务管理器</p>
<p>​    属性：    type    表示事务管理器的类型</p>
<p>​    属性值：①JDBC：使用connection对象，由mybatis自己完成的处理。</p>
<p>​                     ②MANGER：    管理，表示把商务的管理交给容器来做。 （由其他软件实现事务的提交，回滚。）</p>
<p>dataSource：数据源，创建Connection对象，连接数据库。</p>
<p>​    属性：type 数据源的类型</p>
<p>​    属性值：①pooled，mybatis会在内存中创建pooledDateSource类，管理多个connection连接对象，使用的连接池。</p>
<p>​                     ②unpooled，不使用连接池，Mybatis创建一个unpooledDateSource这个类，每次执行sql语句再创建connection对象，最后关闭connection。</p>
<p>​                     ③JNDI：java的命名和目录服务。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">&lt;!--配置数据源，创建connection对象--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--driver：配置驱动的内容--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--连接数据库的url--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;jdbc:mysql://localhost:3306/springdb&quot;</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--用户名--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;root&quot;</span>/&gt;</span></span><br><span class="line">            <span class="comment">&lt;!--密码--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;admin&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="使用数据库属性配置文件"><a href="#使用数据库属性配置文件" class="headerlink" title="使用数据库属性配置文件"></a>使用数据库属性配置文件</h3><p>需要把数据库的信息放到一个单独文件中，独立管理。这个文件扩展名是properties。在这个文件中，使用自定义的key=value的格式表示数据。</p>
<p>使用步骤：</p>
<p>①在resources目录中，创建XXX.properties。</p>
<p>②在文件中，使用key=value的格式定义数据。</p>
<p>​    例如：    jdbc.url=jdbc:mysql://localhost:3306/springdb</p>
<p>③在mybatis主配置文件，使用<properties>标签应用外部的属性配置文件。</p>
<p>④需要在使用值的位置，使用${key}获取对应的value（等号右侧的值）</p>
<p>jdbc.properties</p>
<figure class="highlight properties"><table><tr><td class="code"><pre><span class="line"><span class="meta">jdbc.driver</span>=<span class="string">com.mysql.jdbc.Driver</span></span><br><span class="line"><span class="meta">jdbc.url</span>=<span class="string">jdbc:mysql://localhost:3306/springdb</span></span><br><span class="line"><span class="meta">jdbc.username</span>=<span class="string">root</span></span><br><span class="line"><span class="meta">jdbc.password</span>=<span class="string">admin</span></span><br></pre></td></tr></table></figure>

<p>mybatis.xml</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--用来指定类路径下某个属性配置文件--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span> <span class="attr">resource</span>=<span class="string">&quot;jdbc.properties&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="tag">&lt;<span class="name">environments</span> <span class="attr">default</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">environment</span> <span class="attr">id</span>=<span class="string">&quot;development&quot;</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">transactionManager</span> <span class="attr">type</span>=<span class="string">&quot;JDBC&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">            <span class="comment">&lt;!--配置数据源，创建connection对象--&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">dataSource</span> <span class="attr">type</span>=<span class="string">&quot;POOLED&quot;</span>&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--driver：配置驱动的内容--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;driver&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.driver&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--连接数据库的url--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;url&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.url&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--用户名--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;username&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.username&#125;&quot;</span>/&gt;</span></span><br><span class="line">                <span class="comment">&lt;!--密码--&gt;</span></span><br><span class="line">                <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span> <span class="attr">value</span>=<span class="string">&quot;$&#123;jdbc.password&#125;&quot;</span>/&gt;</span></span><br><span class="line">            <span class="tag">&lt;/<span class="name">dataSource</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">environment</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">environments</span>&gt;</span></span><br></pre></td></tr></table></figure>



<h3 id="mapper标签"><a href="#mapper标签" class="headerlink" title="mapper标签"></a>mapper标签</h3><p>使用mapper指定其他mapper文件的位置</p>
<p>mapper标签使用的格式有两种方式</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">mappers</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--mapper文件的第一种方式：resources=&quot;mapper文件的路径&quot;</span></span><br><span class="line"><span class="comment">        优点：文件清晰。加载的文件是明确的。并且文件的位置比较灵活。</span></span><br><span class="line"><span class="comment">        缺点：如果文件比较多，代码会比较多。管理难度大。</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mapper</span> <span class="attr">resource</span>=<span class="string">&quot;com/xienode/dao/StudentDao.xml&quot;</span>/&gt;</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">&lt;!--</span></span><br><span class="line"><span class="comment">    第二种方式：使用&lt;package&gt;</span></span><br><span class="line"><span class="comment">    name:包名，mapper文件所在的包名。</span></span><br><span class="line"><span class="comment">    特点：把这个文件的包名一次性加载。</span></span><br><span class="line"><span class="comment">    使用要求：</span></span><br><span class="line"><span class="comment">    ①mapper文件和dao接口在同一目录下</span></span><br><span class="line"><span class="comment">    ②mapper文件和dao接口名称完全一样</span></span><br><span class="line"><span class="comment">    --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">package</span> <span class="attr">name</span>=<span class="string">&quot;com.xienode.dao&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">mappers</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="PageHelper扩展（分页插件的使用）"><a href="#PageHelper扩展（分页插件的使用）" class="headerlink" title="PageHelper扩展（分页插件的使用）"></a>PageHelper扩展（分页插件的使用）</h2><p>PageHelper做数据分页。在你的select语句后面加入分页的sql内容，如果你使用的是sql数据库，它就是在 select * from student后面加入limit语句。</p>
<p>使用步骤：</p>
<p>①加入依赖:maven坐标</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.pagehelper<span class="tag">&lt;/<span class="name">groupld</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactld</span>&gt;</span>pagehelper<span class="tag">&lt;/<span class="name">artifactld</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>5.1.10<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>②在mybatis主配置文件，加入plugin声明</p>
<p>在<environment>之前加入</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">plugins</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">plugin</span> <span class="attr">interceptor</span>=<span class="string">&quot;com.github.pagehelper.Pagelnterceptor&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">plugins</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>③在select语句之前，调用PageHelper.startPage(页码，每页大小)</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">testSelectHelper</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取sqlSession对象</span></span><br><span class="line">    SqlSession session = MyBatisUtil.getSqlSession();</span><br><span class="line">    <span class="comment">//获取Dao的代理</span></span><br><span class="line">    StudentDao dao =  session.getMapper(StudentDao.class);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//调用pageHelper的方法</span></span><br><span class="line">    PageHelper.startPage(<span class="number">1</span>, <span class="number">3</span>);</span><br><span class="line"></span><br><span class="line">    List&lt;Student&gt; students = dao.selectAllStudent();</span><br><span class="line">    students.forEach(System.out::println);</span><br><span class="line">    <span class="comment">//关闭sqlSession对象</span></span><br><span class="line">    session.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<p><img src="C:\Users\Dell\AppData\Roaming\Typora\typora-user-images\image-20210818161138174.png" alt="image-20210818161138174"></p>
]]></content>
  </entry>
  <entry>
    <title>spring框架学习Day02</title>
    <url>/spring%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0Day02.html</url>
    <content><![CDATA[<h2 id="IOC控制反转"><a href="#IOC控制反转" class="headerlink" title="IOC控制反转"></a>IOC控制反转</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>控制反转（IOC，Inversion of Control），是一个概念，是一种思想。指导开发人员如何适用对象，管理对象的。把对象的创建，属性赋值，对象的声明周期都交给代码之外的容器管理。</p>
<h4 id="IOC分为-控制和反转"><a href="#IOC分为-控制和反转" class="headerlink" title="IOC分为 控制和反转"></a>IOC分为 控制和反转</h4><p>​    控制：对象创建，属性赋值，对象的周期管理。</p>
<p>​    反转：把开发人员管理对象的权限转移给了代码之外的容器实现。由容器完成对象的管理。</p>
<p>​    正转：开发人员在代码中，使用new构造方法创建对象。开发人员掌握了对象的创建，属性赋值，对象从开始到销毁的全部过程。开发人员对 对象的全部控制。</p>
<p>​    通过这个容器可以使用容器中的对象（容器已经创建了对象，对象属性赋值了，对象也组装好了）。</p>
<p>​    spring就是一个容器，可以管理对象，创建对象，给属性赋值。</p>
<h4 id="IOC的技术实现"><a href="#IOC的技术实现" class="headerlink" title="IOC的技术实现"></a>IOC的技术实现</h4><p>DI（依赖注入）：dependency injection，缩写是DI，是IOC的一种技术实现。程序只需要提供要使用的对象的名称就可以了，对象如何创建，如何从容器中查找，获取都由容器内部自己实现。</p>
<p>依赖名词：比如说ClassA类使用了ClassB的属性或方法，叫做ClassA依赖ClassB。</p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassB</span></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createOrder</span><span class="params">()</span></span>&#123;&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ClassA</span></span>&#123;</span><br><span class="line">    <span class="comment">//属性</span></span><br><span class="line">    <span class="keyword">private</span> Class b = <span class="keyword">new</span> ClassB();</span><br><span class="line">    </span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">buy</span><span class="params">()</span></span>&#123;</span><br><span class="line">        b.createOrder();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//执行ClassA的Bay()</span></span><br><span class="line">ClassA a = <span class="keyword">new</span> ClassA();</span><br><span class="line">a.buy();</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="spring框架使用的DI实现IOC"><a href="#spring框架使用的DI实现IOC" class="headerlink" title="spring框架使用的DI实现IOC"></a>spring框架使用的DI实现IOC</h4><p>通过spring框架，只需要提供使用对象的对象名词就可以了。从容器中获取对应的对象。</p>
<p>spring低层使用的是反射机制，通过反射创建对象，给属性。</p>
<h4 id="spring的配置文件"><a href="#spring的配置文件" class="headerlink" title="spring的配置文件"></a>spring的配置文件</h4><figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">beans</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://www.springframework.org/schema/beans&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">       <span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://www.springframework.org/schema/beans </span></span></span><br><span class="line"><span class="tag"><span class="string">                           http://www.springframework.org/schema/beans/spring-beans.xsd&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;/<span class="name">beans</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>spring标准的配置文件：</p>
<p>①根标签是beans</p>
<p>②beans后面的是约束文件说明</p>
<p>③beans里面是bean的声明</p>
<p>④什么是bean；bean就是java对象。由spring管理的java对象，叫做bean。</p>
<h4 id="spring容器创建对象的特点"><a href="#spring容器创建对象的特点" class="headerlink" title="spring容器创建对象的特点"></a>spring容器创建对象的特点</h4><p>①容器对象ApplicationContext：接口</p>
<p>通过ApplicationContext对象，获取要使用的其他java对象，执行getBean(“<bean>的id”)</p>
<p>②spring默认是调用类的无参构造方法，创建对象。</p>
<p>③spring读取配置文件，一次创建好所有的java对象，都放到map之中。</p>
<h4 id="DI：给属性赋值"><a href="#DI：给属性赋值" class="headerlink" title="DI：给属性赋值"></a>DI：给属性赋值</h4><p>spring调用类的无参构造方法，创建对象。对象创建后给属性赋值。</p>
<p>给属性赋值可以使用：①xml配置文件中的标签和属性，②使用注解。</p>
<p>ID分类：①set注入，也叫做设值注入；②构造注入</p>
<h5 id="基于xml的DI"><a href="#基于xml的DI" class="headerlink" title="基于xml的DI"></a>基于xml的DI</h5><p>在xml配置文件中使用标签和属性，完成对象的创建，属性赋值。</p>
<p>①set注入，也叫作设值注入。</p>
<p>概念：spring调用类中的set方法。在set方法中可以完成属性赋值。推荐使用。</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--简单类型的设值注入，使用value--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;mySchool&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.xienode.ba02.School&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;北京大学&quot;</span>/&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;address&quot;</span> <span class="attr">value</span>=<span class="string">&quot;北京海淀区&quot;</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--引用类型set注入--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">bean</span> <span class="attr">id</span>=<span class="string">&quot;myStudent&quot;</span> <span class="attr">class</span>=<span class="string">&quot;com.xienode.ba02.Student&quot;</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;张三&quot;</span>/&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;age&quot;</span> <span class="attr">value</span>=<span class="string">&quot;22&quot;</span>/&gt;</span></span><br><span class="line">        <span class="comment">&lt;!--引用类型的赋值--&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">property</span> <span class="attr">name</span>=<span class="string">&quot;school&quot;</span> <span class="attr">ref</span>=<span class="string">&quot;mySchool&quot;</span>/&gt;</span><span class="comment">&lt;!--setSchool(mySchool)--&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">bean</span>&gt;</span></span><br></pre></td></tr></table></figure>



<p>②构造注入</p>
<p>构造注入：spring调用类中有参数构造方法，在创建对象的同时，给属性赋值</p>
]]></content>
  </entry>
  <entry>
    <title>spring框架学习Day01</title>
    <url>/spring%E6%A1%86%E6%9E%B6%E5%AD%A6%E4%B9%A0Day01.html</url>
    <content><![CDATA[<h2 id="Spring框架是什么"><a href="#Spring框架是什么" class="headerlink" title="Spring框架是什么"></a>Spring框架是什么</h2><h3 id="什么是spring"><a href="#什么是spring" class="headerlink" title="什么是spring"></a>什么是spring</h3><p>spring就是一个java框架，使用java语言开发的，轻量级的，开源的框架。可以在j2ee</p>
<p>spring核心技术：IOC，AOP</p>
<p>spring又叫做容器。spring作为容器，装的是java对象，给属性赋值。</p>
<p>spring作用：实现解耦合，解决java对象之间的耦合，解决模块之间的耦合。</p>
<h3 id="spring的地址"><a href="#spring的地址" class="headerlink" title="spring的地址"></a>spring的地址</h3><p><a href="https://spring.io/">https://spring.io</a></p>
<h3 id="spring的体系结构"><a href="#spring的体系结构" class="headerlink" title="spring的体系结构"></a>spring的体系结构</h3><p><img src="C:\Users\Dell\AppData\Roaming\Typora\typora-user-images\image-20210911120712295.png" alt="image-20210911120712295"></p>
<p>Spring 由 20 多个模块组成，它们可以分为数据访问/集成（Data Access/Integration）、Web、面向切面编程（AOP, Aspects）、提供 JVM 的代理（Instrumentation）、消息发送（Messaging）、核心容器（Core Container）和测试（Test）。</p>
<h2 id="spring优点"><a href="#spring优点" class="headerlink" title="spring优点"></a>spring优点</h2><p>Spring 是一个框架，是一个半成品的软件。有 20 个模块组成。它是一个 容器管理对象，容器是装东西的，Spring 容器不装文本，数字。装的是对象。 Spring 是存储对象的容器。</p>
<p> （1） 轻量 Spring 框架使用的 jar 都比较小，一般在 1M 以下或者几百 kb。Spring 核心功能的所需的 jar 总共在 3M 左右。 Spring 框架运行占用的资源少，运行效率高。不依赖其他 jar包。</p>
<p> （2） 针对接口编程，解耦合 Spring 提供了 Ioc 控制反转，由容器管理对象，对象的依赖关系。原来在 程序代码中的对象创建方式，现在由容器完成。对象之间的依赖解耦合。</p>
<p> （3） AOP 编程的支持 通过 Spring 提供的 AOP 功能，方便进行面向切面的编程，许多不容易用 传统 OOP 实现的功能可以通过 AOP 轻松应付 在 Spring 中，开发人员可以从繁杂的事务管理代码中解脱出来，通过声明 式方式灵活地进行事务的管理，提高开发效率和质量。</p>
<p> （4） 方便集成各种优秀框架 Spring 不排斥各种优秀的开源框架，相反 Spring 可以降低各种框架的使用难度，Spring 提供了对各种优秀框架（如 Struts,Hibernate、MyBatis）等 的直接支持。简化框架的使用。 Spring 像插线板一样，其他框架是插头，可以容易的组合到一起。需要使用哪 个框架，就把这个插头放入插线板。不需要可以轻易的移除。</p>
]]></content>
  </entry>
</search>
